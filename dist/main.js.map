{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domGameBegin.js","webpack://battleship/./src/domGameboard.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","notAttackedTiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","moveShip","shipId","Math","random","toggleOrientation","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","player2NameInput","document","getElementById","player1NameInput","setToOnePlayer","players","style","display","required","number","setToTwoPlayers","startGame","game","addPlayer1","value","addPlayer2","player1","createShips","player2","relatePlayers","renderShip","DOMBoardId","ShipContainerId","shipTiles","getTiles","length","shipContainer","outOfBoardShip","shipLength","createElement","classList","add","tile","appendChild","createOutOfBoardShip","draggable","setAttribute","getId","domTile","horizontal","addShootMarker","hitMarker","innerHTML","createBoard","DOMboardId","boardContainer","renderBoard","shipContainerId","mode","Error","childNodes","forEach","clearBoard","Gameboard","renderAllShips","playerGameboard","tileId","shootsRecieved","water","tileWater","renderShootedWaterTiles","renderShoots","Human","Computer","stage","winner","_playerType","_playerName","setEnemy","getStage","setStage","_stage","includes","getWinner","p1Ships","getShips","p2Ships","checkAllShipsPlaced","gameTurn","play","checkEndGame","allShipsSank","setWinner","Ship","addShip","removeShip","previousPosition","setTiles","shipsIntersects","ship1Id","ship2Id","ship1Tiles","ship2Tiles","tile1","tile2","rotateShip","receiveAttack","coordinate","hit","shipHit","isSunk","name","enemy","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","_length","setId","tiles","hits","currentId","_position","Number","isInteger","chooseTiles","generateHitsObject","Array","isArray","row","isHorizontal","getHits","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","domBoard","domBegin","OnePlayerButton","TwoPlayerButton","playerNamesForm","preGameSettings","addEventListener","e","preventDefault","console","log"],"mappings":"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","file":"main.js","sourcesContent":["const Player = require('./player')\n\nclass Computer extends Player {\n    constructor(_name) {\n        super(_name)\n        this.notAttackedTiles = this.makeArrayOfTiles()\n    }\n\n    placeShips() {\n        for (let ship of Object.values(this.gameboard.ships)) {\n            let validPosition = false\n            while (!validPosition) {\n                let position = this.generatePosition()\n                this.randomRotation(ship.id)\n                validPosition = this.gameboard.moveShip(ship.id, position)\n            }\n        }\n    }\n\n    randomRotation(shipId) {\n        if (Math.random() < 0.5) {\n            this.gameboard.ships[shipId].toggleOrientation()\n        }\n    }\n\n    generatePosition() {\n        return Math.floor(Math.random() * 100)\n    }\n\n    setNextOutgoingAttack() {\n        this.notAttackedTiles = this.shuffleArray(this.notAttackedTiles)\n        this.nextOutgoingAttack = this.notAttackedTiles.pop()\n    }\n\n    shuffleArray(array) {\n        array.sort((a, b) => 0.5 - Math.random())\n        return array\n    }\n\n    makeArrayOfTiles() {\n        let array = []\n        for (let i = 0; i < 100; i++) {\n            array.push(i)\n        }\n        return array\n    }\n}\n\nmodule.exports = Computer\n","\nconst player2NameInput = document.getElementById('player2-name')\nconst player1NameInput = document.getElementById('player1-name')\n\nfunction setToOnePlayer(players) {\n    player2NameInput.style.display = 'none'\n    player2NameInput.required = false\n    players.number = 1\n}\n\nfunction setToTwoPlayers(players) {\n    player2NameInput.style.display = 'block'\n    player2NameInput.required = true\n    players.number = 2\n}\n\nfunction startGame(game, players) {\n    if (players.number === 1) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('computer', 'r2-d2')\n        game.player1.createShips()\n        game.player2.createShips()\n        game.player2.placeShips()\n    } else if (players.number === 2) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('human', player2NameInput.value)\n    }\n    game.relatePlayers()\n}\n\nmodule.exports = { setToOnePlayer, setToTwoPlayers, startGame }","\nfunction createBoard(DOMboardId) {\n    const boardContainer = document.getElementById(DOMboardId);\n    for (let i = 0; i < 100; i++) {\n        let tile = document.createElement('div')\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\n        tile.classList.add('tile')\n        boardContainer.appendChild(tile)\n    }\n}\n\nfunction renderBoard(gameboard, DOMBoardId, shipContainerId, mode) {\n    if (mode === 'player' || mode === 'enemy') {\n        clearBoard(DOMBoardId)\n        if (mode === 'player') {\n            renderAllShips(gameboard, DOMBoardId, shipContainerId)\n        }\n        renderShoots(gameboard, DOMBoardId)\n    } else {\n        throw new Error('mode not valid, try with player or enemy')\n    }\n}\n\nfunction clearBoard(DOMBoardId) {\n    let tiles = document.getElementById(DOMBoardId).childNodes\n    tiles.forEach( tile => {\n        tile.classList = ''\n        tile.classList.add('tile')\n    })\n}\n\nfunction renderAllShips(Gameboard, DOMBoardId, ShipContainerId) {\n    for (ship of Object.values(Gameboard.ships)) {\n        renderShip(ship, DOMBoardId, ShipContainerId)\n    }\n}\n\nfunction renderShip(ship, DOMBoardId, ShipContainerId) {\n    let shipTiles = ship.getTiles()\n    if (shipTiles.length === 0) {\n        const shipContainer = document.getElementById(ShipContainerId)\n        let outOfBoardShip = createOutOfBoardShip(ship.length)\n        outOfBoardShip.draggable = true\n        outOfBoardShip.setAttribute('data-ship-id', ship.getId())\n        shipContainer.appendChild(outOfBoardShip)\n    } else {\n        for (let tile = 0; tile < ship.length; tile++) {\n            let domTile = document.getElementById(`${DOMBoardId}-${shipTiles[tile]}`)\n            domTile.classList.add('tile-ship')\n            domTile.classList.add('no-drop')\n            domTile.draggable = true\n            domTile.setAttribute('data-ship-id', ship.getId())\n            domTile.setAttribute('data-ship-length', ship.length)\n            if (tile === 0) {\n                if (ship.horizontal) { domTile.classList.add('ship-left')}\n                else { domTile.classList.add('ship-top')}\n            } else if (tile === ship.length - 1) {\n                if (ship.horizontal) { domTile.classList.add('ship-right')}\n                else { domTile.classList.add('ship-bottom')}\n            }\n        }\n    }\n}\n\nfunction createOutOfBoardShip(shipLength) {\n    let ship = document.createElement('div')\n    ship.classList.add('out-of-board-ship')\n    for (let position = 0; position < shipLength; position++) {\n        let tile = document.createElement('div')\n        tile.classList.add('tile')\n        if (position === 0) {\n            tile.classList.add('ship-left')\n        } else if (position === shipLength - 1) {\n            tile.classList.add('ship-right')\n        }\n        ship.appendChild(tile)\n    }\n    return ship\n}\n\nfunction renderShoots(gameboard, DOMBoardId) {\n    renderShootedWaterTiles(gameboard, DOMBoardId)\n    // TODO: seguir agregando aca los shoots hit y los hundidos\n}\n\nfunction renderShootedWaterTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.shootsRecieved.water) {\n        let tileWater = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileWater.classList.add('tile-water')\n        addShootMarker(tileWater)\n    }\n}\n\n// function showShotedHitTiles(playerGameboard, DOMBoardId) {\n//     for (tileId of playerGameboard.tilesShoted.hit) {\n//         let tileHit = document.getElementById(`${DOMBoardId}-${tileId}`)\n//         tileHit.classList.remove('tile-ship')\n//         tileHit.classList.add('tile-hit')\n//         addShootMarker(tileHit)\n//     }\n// }\n//\nfunction addShootMarker(tile) {\n    const hitMarker = document.createElement('div')\n    hitMarker.classList.add('shoot')\n    tile.innerHTML = ''\n    tile.appendChild(hitMarker)\n}\n//\n// function showSunkShipTiles(playerGameboard, DOMBoardId) {\n//     let sunkShips = playerGameboard.getSunkShips()\n//     for (shipId of sunkShips) {\n//         showSunkShip(playerGameboard.ships[shipId], DOMBoardId)\n//     }\n// }\n//\n// function showSunkShip(ship, DOMBoardId) {\n//     if (ship.horizontal) {\n//         for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n//             let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n//             if (shipPositionDelta === 0) {\n//                 shipTile.classList.add('ship-left')\n//             } else if (shipPositionDelta === ship.length - 1) {\n//                 shipTile.classList.add('ship-right')\n//             }\n//             shipTile.classList.remove('tile-hit')\n//             shipTile.classList.add('tile-sunk')\n//         }\n//     } else {\n//         for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n//             let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n//             if (shipPositionDelta === 0) {\n//                 shipTile.classList.add('ship-top')\n//             } else if (shipPositionDelta === ship.length - 1) {\n//                 shipTile.classList.add('ship-bottom')\n//             }\n//             shipTile.classList.remove('tile-hit')\n//             shipTile.classList.add('tile-sunk')\n//         }\n//     }\n// }\n\nmodule.exports = { createBoard, renderBoard }\n","const Human = require('./humanPlayer')\nconst Computer = require('./computerPlayer')\n\nclass Game {\n    constructor() {\n        this.player1 = null\n        this.player2 = null\n        this.stage = 'preGame'\n        this.winner = null\n    }\n\n    addPlayer1(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player1 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player1 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    addPlayer2(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player2 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player2 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    relatePlayers() {\n        this.player1.setEnemy(this.player2)\n        this.player2.setEnemy(this.player1)\n    }\n\n    getStage() {\n        return this.stage\n    }\n\n    setStage(_stage) {\n        const stages = ['preGame', 'inGame', 'ended']\n        if (stages.includes(_stage)) {\n            this.stage = _stage\n        } else {\n            throw new Error('stage is not a valid game stage')\n        }\n    }\n\n    getWinner() {\n        return this.winner\n    }\n\n    startGame() {\n        if (this.getStage() === 'preGame') {\n            let p1Ships = this.player1.gameboard.getShips()\n            let p2Ships = this.player2.gameboard.getShips()\n            if (this.checkAllShipsPlaced(p1Ships) && this.checkAllShipsPlaced(p2Ships)) {\n                this.setStage('inGame')\n                return true\n            } else {\n                return false\n            }\n        } else {\n            throw new Error('Game has already been started. Try to reset to start over')\n        }\n    }\n\n    checkAllShipsPlaced(ships) {\n        for (let ship of Object.values(ships)) {\n            if (ship.getTiles().length === 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    gameTurn() {\n        if (this.getStage() === 'inGame') {\n            if (this.player1 instanceof Human && this.player2 instanceof Computer) {\n                this.player1.play()\n                this.player2.setNextOutgoingAttack()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Human) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.play()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Computer) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.play()\n                this.player2.setNextOutgoingAttack()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Human && this.player2 instanceof Human) {\n                if (this.player1.nextOutgoingAttack) {\n                    this.player1.play()\n                } else if (this.player2.nextOutgoingAttack) {\n                    this.player2.play()\n                    this.checkEndGame()\n                }\n            }\n        } else {\n            throw new Error('cannot play if the game has not started')\n        }\n\n    }\n\n    checkEndGame() {\n        if (this.player1.gameboard.allShipsSank() || this.player2.gameboard.allShipsSank()) {\n            this.setStage('ended')\n            this.setWinner()\n        }\n    }\n\n    setWinner() {\n        if (this.player1.gameboard.allShipsSank() && this.player2.gameboard.allShipsSank()) {\n            this.winner = 'tie'\n        } else if (this.player1.gameboard.allShipsSank()) {\n            this.winner = this.player2\n        } else if (this.player2.gameboard.allShipsSank()) {\n            this.winner = this.player1\n        }\n    }\n}\n\nmodule.exports = Game\n","const Ship = require('./ship');\n\nclass Gameboard {\n\n    constructor() {\n        this.ships = {}\n        this.shootsRecieved = {'water': [], 'hit': []}\n    }\n\n    addShip(shipLength) {\n        let ship = new Ship(shipLength)\n        this.ships[ship.getId()] = ship\n        return this.ships[ship.getId()]\n    }\n\n    removeShip(shipId) {\n        delete this.ships[shipId]\n    }\n\n    getShips() {\n        return this.ships\n    }\n\n    moveShip(shipId, position) {\n        let previousPosition = this.ships[shipId].getTiles()\n        this.ships[shipId].setTiles(position)\n        for (let ship of Object.values(this.ships)) {\n            if (ship.getId() !== shipId && this.shipsIntersects(ship.getId(), shipId)) {\n                this.ships[shipId].setTiles(previousPosition)\n                return false\n            }\n        }\n        return  true\n    }\n\n    shipsIntersects(ship1Id, ship2Id) {\n        let ship1Tiles = this.ships[ship1Id].getTiles()\n        let ship2Tiles = this.ships[ship2Id].getTiles()\n        for (let tile1 of ship1Tiles) {\n            for (let tile2 of ship2Tiles) {\n                if (tile1 === tile2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    rotateShip(shipId) {\n        if (this.ships[shipId].getTiles().length === 0) {\n            throw new Error(`Can't rotate ship outside the board`)\n        }\n        this.ships[shipId].toggleOrientation()\n        let previousPosition = this.ships[shipId].getTiles()\n        return this.moveShip(shipId, previousPosition[0])\n    }\n\n    receiveAttack(coordinate) {\n        if (this.shootsRecieved.water.includes(coordinate) || this.shootsRecieved.hit.includes(coordinate)) {\n            return false\n        }\n        if (this.shipHit(coordinate)) {\n            this.shootsRecieved.hit.push(coordinate)\n        } else {\n            this.shootsRecieved.water.push(coordinate)\n        }\n        return true\n    }\n\n    shipHit(coordinate){\n        let shipHit = false\n        for (let ship of Object.values(this.ships)) {\n            shipHit = shipHit || ship.hit(coordinate)\n        }\n        return shipHit\n    }\n\n    allShipsSank() {\n        for (let ship of Object.values(this.ships)) {\n            if (!ship.isSunk()) {\n                return false\n            }\n        }\n        return true\n    }\n}\n\nmodule.exports = Gameboard\n","const Player = require('./player')\n\nclass Human extends Player {\n    constructor(_name) {\n        super(_name)\n    }\n\n    setNextOutgoingAttack(coordinate) {\n        this.nextOutgoingAttack = coordinate\n    }\n}\n\nmodule.exports = Human\n","const Gameboard = require('./gameboard')\n\nclass Player {\n    constructor(_name) {\n        this.name = _name\n        this.gameboard = new Gameboard()\n        this.nextOutgoingAttack = null\n        this.enemy = null\n    }\n\n    createShips() {\n        for (let i = 2; i < 6; i++) {\n            for (let j = 1; j < 7 - i; j++) {\n                this.gameboard.addShip(i)\n            }\n        }\n    }\n\n    setNextOutgoingAttack() {\n        return null\n    }\n\n    getNextOutgoingAttack() {\n        return this.nextOutgoingAttack\n    }\n\n    setEnemy(_enemy) {\n        this.enemy = _enemy\n    }\n\n    getEnemy() {\n        return this.enemy\n    }\n\n    deleteEnemy() {\n        this.enemy = null\n    }\n\n    play() {\n        let coordinate = this.getNextOutgoingAttack()\n        this.enemy.gameboard.receiveAttack(coordinate)\n        this.nextOutgoingAttack = null\n    }\n}\n\nmodule.exports = Player\n","\nclass Ship {\n\n    static currentId = -1\n\n    constructor(_length) {\n        if (_length <= 0 || 6 <= _length) {\n            throw new Error('Ship length must be between 1 and 5')\n        }\n        this.id = this.setId()\n        this.length = _length\n        this.horizontal = true\n        this.tiles = []\n        this.hits = {}\n    }\n\n    setId() {\n        Ship.currentId++\n        return Ship.currentId\n    }\n\n    getId() {\n        return this.id\n    }\n\n    getTiles() {\n        return this.tiles\n    }\n\n    setTiles(_position) {\n        if (Number.isInteger(_position)) {\n            if (_position < 0 || _position > 99) {\n                throw new Error('position not valid')\n            }\n            this.tiles = this.chooseTiles(_position)\n            this.generateHitsObject(this.tiles)\n        } else if (Array.isArray(_position)) {\n            if (_position.length === 0 || this.length === _position.length) {\n                this.tiles = _position\n            } else {\n                throw new Error(`The number of tiles you're trying to assign does not match with the ship length`)\n            }\n\n        }\n\n    }\n\n    chooseTiles(_position) {\n        let tiles = []\n        if (this.horizontal) {\n            const row = Math.floor(_position / 10)\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (Math.floor((_position + i) / 10) === row) {\n                    tiles.push(_position + i)\n                } else {\n                    tiles.push(_position - j)\n                    j++\n                }\n                i++\n            }\n        } else {\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (_position + (i * 10) < 100) {\n                    tiles.push(_position + (i * 10))\n                } else {\n                    tiles.push(_position - (j * 10))\n                    j++\n                }\n                i++\n            }\n        }\n        tiles.sort((a, b) => a-b)\n        return tiles\n    }\n\n    generateHitsObject(tiles) {\n        this.hits = {}\n        tiles.forEach(tile => this.hits[tile] = false)\n    }\n\n    isHorizontal() {\n        return this.horizontal\n    }\n\n    toggleOrientation() {\n        this.horizontal = !this.horizontal\n    }\n\n    hit(coordinate) {\n        if (coordinate in this.hits) {\n            this.hits[coordinate] = true\n            return true\n        }\n        return false\n    }\n\n    getHits() {\n        return this.hits\n    }\n\n    isSunk() {\n        for(let hit of Object.values(this.hits)) {\n            if (!hit) { return false; }\n        }\n        return true\n    }\n}\n\nmodule.exports = Ship\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\nconst domBoard = require('./domGameboard')\nconst domBegin = require('./domGameBegin')\n\nlet players = {'number': 1}\nlet game = new Game()\n\nconst OnePlayerButton = document.getElementById('1player')\nconst TwoPlayerButton = document.getElementById('2players')\nconst playerNamesForm = document.getElementById('player-names')\nconst preGameSettings = document.getElementById('pre-game-settings')\n\nOnePlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToOnePlayer(players)\n})\n\nTwoPlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToTwoPlayers(players)\n})\n\n// When submiting this form Ship Placement stage begins\nplayerNamesForm.addEventListener('submit', (e) => {\n    e.preventDefault()\n    domBegin.startGame(game, players)\n    domBoard.createBoard('P1Board')\n    domBoard.createBoard('P1enemyBoard')\n    for (let i = 0; i < 10; i++) {\n        game.player1.gameboard.moveShip(i,i*10)\n    }\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    domBoard.renderBoard(game.player2.gameboard, 'P1enemyBoard', 'ship-container2', 'player')\n    preGameSettings.style.display = \"none\"\n})\n\n\nconst button111 = document.getElementById('placing-finished')\nbutton111.addEventListener('click', () => {\n    console.log(game)\n    game.startGame()\n    console.log(game)\n    game.player1.setNextOutgoingAttack(12)\n    game.gameTurn()\n    game.player1.setNextOutgoingAttack(15)\n    game.gameTurn()\n    game.player1.setNextOutgoingAttack(17)\n    game.gameTurn()\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    domBoard.renderBoard(game.player2.gameboard, 'P1enemyBoard', 'ship-container2', 'player')\n    console.log(game)\n})\n\n//\n// const P1enemyBoardTiles = document.getElementById('P1enemyBoard').childNodes\n//\n// P1enemyBoardTiles.forEach(tile => tile.addEventListener('click', attackTile))\n//\n// function attackTile(e) {\n//     let tileId = e.path[0].id.split('-')[1]\n//     game.player1.setNextOutgoingAttack(tileId)\n//     gameLoop()\n//     this.removeEventListener('click', attackTile)\n// }\n//\n// function gameLoop() {\n//     game.gameTurn()\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     domBoard.renderEnemyBoard(game.player2.gameboard, 'P1enemyBoard')\n//     if (game.getGameEnded()) {\n//         P1enemyBoardTiles.forEach(tile => {\n//             tile.removeEventListener('click', attackTile)\n//         })\n//     }\n// }\n//\n// Drag And Drop Ships\n//\n// let playerBoard\n// let draggingElement\n// const P1BoardTiles = document.getElementById('P1Board').childNodes\n//\n// function initShipPlacement() {\n//     playerBoard = document.getElementById('P1Board')\n//     playerBoard.addEventListener('dragover', dragOnBoard, false)\n//     playerBoard.addEventListener('dragleave', dragOffBoard, false)\n//     playerBoard.addEventListener('drop', dropHandle, false)\n//\n//     P1BoardTiles.forEach(tile => tile.addEventListener('dragover', dragOnTile, false))\n//     P1BoardTiles.forEach(tile => tile.addEventListener('dragleave', dragOffTile, false))\n//\n//     // TODO: https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage agregar.\n//     const outOfBoardShips = document.getElementsByClassName('out-of-board-ship')\n//     for (let ship of outOfBoardShips) {\n//         ship.addEventListener('dragstart', dragStarted, false)\n//         ship.addEventListener('dragend', dragEnded, false)\n//     }\n// }\n//\n// function dropHandle(e) {\n//     // TODO: Prevent from dropping thing that arent ships\n//     e.preventDefault()\n//     if (!e.target.classList.contains('no-drop')) {\n//         let position = parseInt(e.target.id.split('-')[1])\n//         let shipLength = e.dataTransfer.getData('shipLength')\n//         let ship = game.player1.gameboard.addShip(shipLength)\n//         let valid = game.player1.gameboard.moveShip(ship.getId(), position)\n//         if (valid) {\n//             draggingElement.parentNode.removeChild(draggingElement)\n//\n//         } else {\n//             delete game.player1.gameboard.removeShip(ship.getId())\n//         }\n//     }\n//     this.classList.remove('over')\n//     e.target.classList.remove('over-tile')\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     allowShipRotations()\n// }\n//\n// function allowShipRotations() {\n//     let shipTiles = playerBoard.querySelectorAll('.tile-ship')\n//     console.log(shipTiles)\n//     shipTiles.forEach(tile => tile.addEventListener('click', rotateShip, false))\n// }\n//\n// function rotateShip(e) {\n//     let shipId = parseInt(e.target.getAttribute('data-ship-id'))\n//     game.player1.gameboard.rotateShip(shipId)\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     console.log(game.player1.gameboard)\n// }\n//\n// function dragStarted(e) {\n//     draggingElement = this\n//     this.style.opacity = '0.4'\n//     e.dataTransfer.setData('shipLength', e.target.childElementCount)\n// }\n//\n// function dragEnded(e) {\n//     this.style.opacity = '1'\n// }\n//\n// function dragOnBoard(e) {\n//     e.preventDefault()\n//     this.classList.add('over')\n//     return false\n// }\n//\n// function dragOffBoard(e) {\n//     e.preventDefault()\n//     this.classList.remove('over')\n//     return false\n// }\n//\n// function dragOnTile(e) {\n//     this.classList.add('over-tile')\n// }\n//\n// function dragOffTile(e) {\n//     this.classList.remove('over-tile')\n// }\n//\n// initShipPlacement()\n"],"sourceRoot":""}