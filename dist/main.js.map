{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","tiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","placeShip","shipId","Math","random","rotate","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","Human","Computer","_player1Type","_p1name","_player2Type","_p2name","player1","createPlayer","player2","relatePlayers","_playerType","_playerName","Error","setEnemy","Ship","tilesWithShips","tilesShoted","addShip","shipLenght","getId","setPosition","possibleTiles","tile","receiveAttack","coordinate","includes","hit","allShipsSank","isSunk","Gameboard","name","enemy","createShips","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","play","_length","setId","length","hits","sunk","horizontal","currentId","_position","setTiles","row","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","game","console","log"],"mappings":"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","file":"main.js","sourcesContent":["const Player = require('./player')\r\n\r\nclass Computer extends Player {\r\n    constructor(_name) {\r\n        super(_name)\r\n        this.tiles = this.makeArrayOfTiles()\r\n    }\r\n\r\n    placeShips() {\r\n        for (let ship of Object.values(this.gameboard.ships)) {\r\n            let validPosition = false\r\n            while (!validPosition) {\r\n                let position = this.generatePosition()\r\n                this.randomRotation(ship.id)\r\n                validPosition = this.gameboard.placeShip(ship.id, position)\r\n            }\r\n        }\r\n    }\r\n\r\n    randomRotation(shipId) {\r\n        if (Math.random() < 0.5) {\r\n            this.gameboard.ships[shipId].rotate()\r\n        }\r\n    }\r\n\r\n    generatePosition() {\r\n        return Math.floor(Math.random() * 100)\r\n    }\r\n\r\n    setNextOutgoingAttack() {\r\n        this.tiles = this.shuffleArray(this.tiles)\r\n        this.nextOutgoingAttack = this.tiles.pop()\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        array.sort((a, b) => 0.5 - Math.random())\r\n        return array\r\n    }\r\n\r\n    makeArrayOfTiles() {\r\n        let array = []\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(i)\r\n        }\r\n        return array\r\n    }\r\n}\r\n\r\nmodule.exports = Computer\r\n","const Human = require('./humanPlayer')\r\nconst Computer = require('./computerPlayer')\r\n\r\nclass Game {\r\n    constructor(_player1Type, _p1name, _player2Type, _p2name) {\r\n        this.player1 = this.createPlayer(_player1Type, _p1name)\r\n        this.player2 = this.createPlayer(_player2Type, _p2name)\r\n        this.relatePlayers()\r\n    }\r\n\r\n    createPlayer(_playerType, _playerName) {\r\n        if (_playerType === 'human') {\r\n            return new Human(_playerName)\r\n        } else if (_playerType === 'computer') {\r\n            return new Computer(_playerName)\r\n        } else {\r\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\r\n        }\r\n    }\r\n\r\n    relatePlayers() {\r\n        this.player1.setEnemy(this.player2)\r\n        this.player2.setEnemy(this.player1)\r\n    }\r\n}\r\n\r\nmodule.exports = Game\r\n","const Ship = require('./ship');\r\n\r\nclass Gameboard {\r\n\r\n    constructor() {\r\n        this.ships = {}\r\n        this.tilesWithShips = {}\r\n        this.tilesShoted = []\r\n    }\r\n\r\n    addShip(shipLenght) {\r\n        let ship = new Ship(shipLenght)\r\n        this.ships[ship.getId()] = ship\r\n        return this.ships[ship.getId()]\r\n    }\r\n\r\n    placeShip(shipId, position) {\r\n        let tiles = this.ships[shipId].setPosition(position)\r\n        let possibleTiles = {}\r\n        for (const tile of tiles) {\r\n            if (!(tile in this.tilesWithShips)) {\r\n                possibleTiles[tile] = shipId\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n        this.tilesWithShips = { ...this.tilesWithShips, ...possibleTiles }\r\n        return true\r\n    }\r\n\r\n    receiveAttack(coordinate) {\r\n        if (this.tilesShoted.includes(coordinate)) {\r\n            return false\r\n        } else {\r\n            this.tilesShoted.push(coordinate)\r\n            if (coordinate in this.tilesWithShips) {\r\n                const shipId = this.tilesWithShips[coordinate]\r\n                this.ships[shipId].hit()\r\n                return 'hit'\r\n            }\r\n            return 'water'\r\n        }\r\n    }\r\n\r\n    allShipsSank() {\r\n        for (const ship of Object.values(this.ships)) {\r\n            if (!ship.isSunk()) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Gameboard\r\n","const Player = require('./player')\r\n\r\nclass Human extends Player {\r\n    constructor(_name) {\r\n        super(_name)\r\n    }\r\n\r\n    placeShips() {\r\n        return null\r\n    }\r\n\r\n    setNextOutgoingAttack(coordinate) {\r\n        this.nextOutgoingAttack = coordinate\r\n    }\r\n}\r\n\r\nmodule.exports = Human\r\n","const Gameboard = require('./gameboard')\r\n\r\nclass Player {\r\n    constructor(_name) {\r\n        this.name = _name\r\n        this.gameboard = new Gameboard()\r\n        this.nextOutgoingAttack = null\r\n        this.enemy = null\r\n    }\r\n\r\n    createShips() {\r\n        for (let i = 2; i < 6; i++) {\r\n            for (let j = 1; j < 7 - i; j++) {\r\n                this.gameboard.addShip(i)\r\n            }\r\n        }\r\n    }\r\n\r\n    placeShips() {\r\n        return null\r\n    }\r\n\r\n    setNextOutgoingAttack() {\r\n        // setea el proximo ataque, este va a variar en humanos y computadora\r\n        return null\r\n    }\r\n\r\n    getNextOutgoingAttack() {\r\n        return this.nextOutgoingAttack\r\n    }\r\n\r\n    setEnemy(_enemy) {\r\n        this.enemy = _enemy\r\n    }\r\n\r\n    getEnemy() {\r\n        return this.enemy\r\n    }\r\n\r\n    deleteEnemy() {\r\n        this.enemy = null\r\n    }\r\n\r\n    play() {\r\n        let coordinate = this.getNextOutgoingAttack()\r\n        this.enemy.gameboard.receiveAttack(coordinate)\r\n        this.nextOutgoingAttack = null\r\n    }\r\n}\r\n\r\nmodule.exports = Player\r\n","\r\nclass Ship {\r\n\r\n    static currentId = -1\r\n\r\n    constructor(_length) {\r\n        if (_length <= 0 || 6 <= _length) {\r\n            throw new Error('Ship length must be between 1 and 5')\r\n        }\r\n        this.id = this.setId()\r\n        this.length = _length\r\n        this.hits = 0\r\n        this.sunk = false\r\n        this.horizontal = true\r\n        this.position = -1\r\n    }\r\n\r\n    setId() {\r\n        Ship.currentId++\r\n        return Ship.currentId\r\n    }\r\n\r\n    getId() {\r\n        return this.id\r\n    }\r\n\r\n    hit() {\r\n        this.hits += 1\r\n        return this\r\n    }\r\n\r\n    isSunk() {\r\n        if (this.hits === this.length) {\r\n            this.sunk = true\r\n            return this.sunk\r\n        }\r\n        return this.sunk\r\n    }\r\n\r\n    setPosition(_position) {\r\n        if (_position < 0 || _position > 99) { throw new Error('position not valid') }\r\n        this.position = _position\r\n        let tiles = this.setTiles()\r\n        return tiles\r\n    }\r\n\r\n    setTiles() {\r\n        let tiles = []\r\n        if (this.horizontal) {\r\n            const row = Math.floor(this.position / 10)\r\n            let i = 0\r\n            let j = 1\r\n            while (i < this.length) {\r\n                if (Math.floor((this.position + i) / 10) === row) {\r\n                    tiles.push(this.position + i)\r\n                } else {\r\n                    tiles.push(this.position - j)\r\n                    j++\r\n                }\r\n                i++\r\n            }\r\n        } else {\r\n            let i = 0\r\n            let j = 1\r\n            while (i < this.length) {\r\n                if (this.position + (i * 10) < 100) {\r\n                    tiles.push(this.position + (i * 10))\r\n                } else {\r\n                    tiles.push(this.position - (j * 10))\r\n                    j++\r\n                }\r\n                i++\r\n            }\r\n        }\r\n        return tiles\r\n    }\r\n\r\n    rotate() {\r\n        this.horizontal = !this.horizontal\r\n        this.setTiles()\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Ship\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\r\n\r\nconst game = new Game('computer', 'cpu1', 'computer', 'cpu2')\r\n\r\ngame.player1.createShips()\r\ngame.player1.placeShips()\r\ngame.player2.createShips()\r\ngame.player2.placeShips()\r\n\r\nwhile (true) {\r\n    game.player1.setNextOutgoingAttack()\r\n    game.player1.play()\r\n    if (game.player2.gameboard.allShipsSank()) {\r\n        console.log('player1 win')\r\n        break\r\n    }\r\n    game.player2.setNextOutgoingAttack()\r\n    game.player2.play()\r\n    if (game.player1.gameboard.allShipsSank()) {\r\n        console.log('player2 win')\r\n        break\r\n    }\r\n}\r\n"],"sourceRoot":""}