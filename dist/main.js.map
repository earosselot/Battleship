{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domGameBegin.js","webpack://battleship/./src/domGameboard.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","notAttackedTiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","moveShip","shipId","Math","random","toggleOrientation","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","player2NameInput","document","getElementById","player1NameInput","setToOnePlayer","players","style","display","required","number","setToTwoPlayers","startGame","game","addPlayer1","value","addPlayer2","player1","createShips","player2","relatePlayers","renderShip","DOMBoardId","shipContainerId","shipTiles","getTiles","length","shipContainer","outOfBoardShip","shipLength","createElement","classList","add","tile","appendChild","createOutOfBoardShip","draggable","setAttribute","getId","domTile","horizontal","renderShootMarker","hitMarker","innerHTML","createBoard","DOMboardId","boardContainer","renderBoard","mode","Error","childNodes","forEach","clearBoard","clearShipContainer","getShips","renderAllShips","playerGameboard","tileId","shootsRecieved","water","tileWater","renderShootedWaterTiles","hit","tileHit","remove","renderShotedHitTiles","isSunk","tileSunk","renderSunkShips","renderShoots","Human","Computer","stage","winner","_playerType","_playerName","setEnemy","getStage","setStage","_stage","includes","getWinner","p1Ships","p2Ships","checkAllShipsPlaced","gameTurn","attack","checkEndGame","allShipsSank","setWinner","Ship","addShip","removeShip","previousPosition","setTiles","shipsIntersects","ship1Id","ship2Id","ship1Tiles","ship2Tiles","tile1","tile2","rotateShip","validRotation","receiveAttack","coordinate","Number","isInteger","shipHit","Gameboard","name","enemy","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","_length","setId","tiles","hits","currentId","_position","chooseTiles","generateHitsObject","Array","isArray","row","isHorizontal","getHits","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","domBoard","domBegin","OnePlayerButton","TwoPlayerButton","playerNamesForm","preGameSettings","setGame","allowShipDragging","attackTile","e","parseInt","path","split","removeEventListener","addEventListener","playerBoard","dragOnBoard","dragOffBoard","dropHandle","P1BoardTiles","dragOnTile","dragOffTile","outOfBoardShips","getElementsByClassName","dragStarted","dragEnded","shipTile","preventDefault","target","dataTransfer","getData","allowShipRotations","querySelectorAll","getAttribute","opacity","setData","dataset","shipid","blockShipDragging"],"mappings":"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","file":"main.js","sourcesContent":["const Player = require('./player')\n\nclass Computer extends Player {\n    constructor(_name) {\n        super(_name)\n        this.notAttackedTiles = this.makeArrayOfTiles()\n    }\n\n    placeShips() {\n        for (let ship of Object.values(this.gameboard.ships)) {\n            let validPosition = false\n            while (!validPosition) {\n                let position = this.generatePosition()\n                this.randomRotation(ship.id)\n                validPosition = this.gameboard.moveShip(ship.id, position)\n            }\n        }\n    }\n\n    randomRotation(shipId) {\n        if (Math.random() < 0.5) {\n            this.gameboard.ships[shipId].toggleOrientation()\n        }\n    }\n\n    generatePosition() {\n        return Math.floor(Math.random() * 100)\n    }\n\n    setNextOutgoingAttack() {\n        this.notAttackedTiles = this.shuffleArray(this.notAttackedTiles)\n        this.nextOutgoingAttack = this.notAttackedTiles.pop()\n    }\n\n    shuffleArray(array) {\n        array.sort((a, b) => 0.5 - Math.random())\n        return array\n    }\n\n    makeArrayOfTiles() {\n        let array = []\n        for (let i = 0; i < 100; i++) {\n            array.push(i)\n        }\n        return array\n    }\n}\n\nmodule.exports = Computer\n","\nconst player2NameInput = document.getElementById('player2-name')\nconst player1NameInput = document.getElementById('player1-name')\n\nfunction setToOnePlayer(players) {\n    player2NameInput.style.display = 'none'\n    player2NameInput.required = false\n    players.number = 1\n}\n\nfunction setToTwoPlayers(players) {\n    player2NameInput.style.display = 'block'\n    player2NameInput.required = true\n    players.number = 2\n}\n\nfunction startGame(game, players) {\n    if (players.number === 1) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('computer', 'r2-d2')\n        game.player1.createShips()\n        game.player2.createShips()\n        game.player2.placeShips()\n    } else if (players.number === 2) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('human', player2NameInput.value)\n    }\n    game.relatePlayers()\n}\n\nmodule.exports = { setToOnePlayer, setToTwoPlayers, startGame }","\nfunction createBoard(DOMboardId) {\n    const boardContainer = document.getElementById(DOMboardId);\n    boardContainer.innerHTML = ''\n    for (let i = 0; i < 100; i++) {\n        let tile = document.createElement('div')\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\n        tile.classList.add('tile')\n        boardContainer.appendChild(tile)\n    }\n}\n\nfunction renderBoard(gameboard, DOMBoardId, shipContainerId, mode) {\n    if (mode === 'player' || mode === 'enemy') {\n        clearBoard(DOMBoardId)\n        clearShipContainer(shipContainerId)\n        if (mode === 'player') {\n            renderAllShips(gameboard, DOMBoardId, shipContainerId)\n        }\n        renderShoots(gameboard, DOMBoardId)\n    } else {\n        throw new Error('mode not valid, try with player or enemy')\n    }\n}\n\nfunction clearBoard(DOMBoardId) {\n    let tiles = document.getElementById(DOMBoardId).childNodes\n    tiles.forEach( tile => {\n        tile.classList = ''\n        tile.classList.add('tile')\n    })\n}\n\nfunction clearShipContainer(shipContainerId) {\n    const shipContainer = document.getElementById(shipContainerId)\n    shipContainer.innerHTML = ''\n}\n\nfunction renderAllShips(gameboard, DOMBoardId, shipContainerId) {\n    for (ship of Object.values(gameboard.getShips())) {\n        renderShip(ship, DOMBoardId, shipContainerId)\n    }\n}\n\nfunction renderShip(ship, DOMBoardId, shipContainerId) {\n    let shipTiles = ship.getTiles()\n    if (shipTiles.length === 0) {\n        let shipContainer = document.getElementById(shipContainerId)\n        let outOfBoardShip = createOutOfBoardShip(ship.length)\n        outOfBoardShip.draggable = true\n        outOfBoardShip.setAttribute('data-shipId', ship.getId())\n        shipContainer.appendChild(outOfBoardShip)\n    } else {\n        for (let tile = 0; tile < ship.length; tile++) {\n            let domTile = document.getElementById(`${DOMBoardId}-${shipTiles[tile]}`)\n            domTile.classList.add('tile-ship')\n            domTile.draggable = true\n            domTile.setAttribute('data-shipId', ship.getId())\n            domTile.setAttribute('data-ship-length', ship.length)\n            if (tile === 0) {\n                if (ship.horizontal) { domTile.classList.add('ship-left')}\n                else { domTile.classList.add('ship-top')}\n            } else if (tile === ship.length - 1) {\n                if (ship.horizontal) { domTile.classList.add('ship-right')}\n                else { domTile.classList.add('ship-bottom')}\n            }\n        }\n    }\n}\n\nfunction createOutOfBoardShip(shipLength) {\n    let ship = document.createElement('div')\n    ship.classList.add('out-of-board-ship')\n    for (let position = 0; position < shipLength; position++) {\n        let tile = document.createElement('div')\n        tile.classList.add('tile')\n        if (position === 0) {\n            tile.classList.add('ship-left')\n        } else if (position === shipLength - 1) {\n            tile.classList.add('ship-right')\n        }\n        ship.appendChild(tile)\n    }\n    return ship\n}\n\nfunction renderShoots(gameboard, DOMBoardId) {\n    renderShootedWaterTiles(gameboard, DOMBoardId)\n    renderShotedHitTiles(gameboard, DOMBoardId)\n    renderSunkShips(gameboard, DOMBoardId)\n}\n\nfunction renderShootedWaterTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.shootsRecieved.water) {\n        let tileWater = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileWater.classList.add('tile-water')\n        renderShootMarker(tileWater)\n    }\n}\n\nfunction renderShotedHitTiles(gameboard, DOMBoardId) {\n    for (tileId of gameboard.shootsRecieved.hit) {\n        let tileHit = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileHit.classList.remove('tile-ship')\n        tileHit.classList.add('tile-hit')\n        renderShootMarker(tileHit)\n    }\n}\n\nfunction renderSunkShips(gameboard, DOMBoardId) {\n    Object.values(gameboard.getShips()).forEach(ship => {\n        if (ship.isSunk()) {\n            renderShip(ship, DOMBoardId, null)\n            ship.getTiles().forEach(tile => {\n                let tileSunk = document.getElementById(`${DOMBoardId}-${tile}`)\n                tileSunk.classList.remove('tile-hit')\n                tileSunk.classList.remove('tile-ship')\n                tileSunk.classList.add('tile-sunk')\n            })\n        }\n    })\n}\n\nfunction renderShootMarker(tile) {\n    const hitMarker = document.createElement('div')\n    hitMarker.classList.add('shoot')\n    tile.innerHTML = ''\n    tile.appendChild(hitMarker)\n}\n\nmodule.exports = { createBoard, renderBoard }\n","const Human = require('./humanPlayer')\nconst Computer = require('./computerPlayer')\n\nclass Game {\n    constructor() {\n        this.player1 = null\n        this.player2 = null\n        this.stage = 'preGame'\n        this.winner = null\n    }\n\n    addPlayer1(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player1 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player1 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    addPlayer2(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player2 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player2 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    relatePlayers() {\n        this.player1.setEnemy(this.player2)\n        this.player2.setEnemy(this.player1)\n    }\n\n    getStage() {\n        return this.stage\n    }\n\n    setStage(_stage) {\n        const stages = ['preGame', 'inGame', 'ended']\n        if (stages.includes(_stage)) {\n            this.stage = _stage\n        } else {\n            throw new Error('stage is not a valid game stage')\n        }\n    }\n\n    getWinner() {\n        return this.winner\n    }\n\n    startGame() {\n        if (this.getStage() === 'preGame') {\n            let p1Ships = this.player1.gameboard.getShips()\n            let p2Ships = this.player2.gameboard.getShips()\n            if (this.checkAllShipsPlaced(p1Ships) && this.checkAllShipsPlaced(p2Ships)) {\n                this.setStage('inGame')\n                return true\n            } else {\n                return false\n            }\n        } else {\n            throw new Error('Game has already been started. Try to reset to start over')\n        }\n    }\n\n    checkAllShipsPlaced(ships) {\n        for (let ship of Object.values(ships)) {\n            if (ship.getTiles().length === 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    gameTurn() {\n        if (this.getStage() === 'inGame') {\n            if (this.player1 instanceof Human && this.player2 instanceof Computer) {\n                this.player1.attack()\n                this.player2.setNextOutgoingAttack()\n                this.player2.attack()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Human) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.attack()\n                this.player2.attack()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Computer) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.attack()\n                this.player2.setNextOutgoingAttack()\n                this.player2.attack()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Human && this.player2 instanceof Human) {\n                if (this.player1.nextOutgoingAttack) {\n                    this.player1.attack()\n                } else if (this.player2.nextOutgoingAttack) {\n                    this.player2.attack()\n                    this.checkEndGame()\n                }\n            }\n        } else {\n            throw new Error('can not play if the game has not started')\n        }\n    }\n\n    checkEndGame() {\n        if (this.player1.gameboard.allShipsSank() || this.player2.gameboard.allShipsSank()) {\n            this.setStage('ended')\n            this.setWinner()\n        }\n    }\n\n    setWinner() {\n        if (this.player1.gameboard.allShipsSank() && this.player2.gameboard.allShipsSank()) {\n            this.winner = 'tie'\n        } else if (this.player1.gameboard.allShipsSank()) {\n            this.winner = this.player2\n        } else if (this.player2.gameboard.allShipsSank()) {\n            this.winner = this.player1\n        }\n    }\n}\n\nmodule.exports = Game\n","const Ship = require('./ship');\n\nclass Gameboard {\n\n    constructor() {\n        this.ships = {}\n        this.shootsRecieved = {'water': [], 'hit': []}\n    }\n\n    addShip(shipLength) {\n        let ship = new Ship(shipLength)\n        this.ships[ship.getId()] = ship\n        return this.ships[ship.getId()]\n    }\n\n    removeShip(shipId) {\n        delete this.ships[shipId]\n    }\n\n    getShips() {\n        return this.ships\n    }\n\n    moveShip(shipId, position) {\n        let previousPosition = this.ships[shipId].getTiles()\n        this.ships[shipId].setTiles(position)\n        for (let ship of Object.values(this.ships)) {\n            if (ship.getId() !== shipId && this.shipsIntersects(ship.getId(), shipId)) {\n                this.ships[shipId].setTiles(previousPosition)\n                return false\n            }\n        }\n        return  true\n    }\n\n    shipsIntersects(ship1Id, ship2Id) {\n        let ship1Tiles = this.ships[ship1Id].getTiles()\n        let ship2Tiles = this.ships[ship2Id].getTiles()\n        if (ship1Tiles.length > 0 && ship2Tiles.length > 0) {\n            for (let tile1 of ship1Tiles) {\n                for (let tile2 of ship2Tiles) {\n                    if (tile1 === tile2) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    rotateShip(shipId) {\n        if (this.ships[shipId].getTiles().length === 0) {\n            throw new Error(`Can't rotate ship outside the board`)\n        }\n        this.ships[shipId].toggleOrientation()\n        let previousPosition = this.ships[shipId].getTiles()\n        let validRotation = this.moveShip(shipId, previousPosition[0])\n        if (validRotation) {\n            return validRotation\n        }\n        this.ships[shipId].toggleOrientation()\n        return validRotation\n    }\n\n    receiveAttack(coordinate) {\n        if (Number.isInteger(coordinate)) {\n            if (this.shootsRecieved.water.includes(coordinate) || this.shootsRecieved.hit.includes(coordinate)) {\n                return false\n            }\n            if (this.shipHit(coordinate)) {\n                this.shootsRecieved.hit.push(coordinate)\n            } else {\n                this.shootsRecieved.water.push(coordinate)\n            }\n            return true\n        } else {\n            return null\n            // throw new Error('coordinate must be an integer')\n        }\n    }\n\n    shipHit(coordinate){\n        let shipHit = false\n        for (let ship of Object.values(this.ships)) {\n            shipHit = shipHit || ship.hit(coordinate)\n        }\n        return shipHit\n    }\n\n    allShipsSank() {\n        for (let ship of Object.values(this.ships)) {\n            if (!ship.isSunk()) {\n                return false\n            }\n        }\n        return true\n    }\n}\n\nmodule.exports = Gameboard\n","const Player = require('./player')\n\nclass Human extends Player {\n    constructor(_name) {\n        super(_name)\n    }\n\n    setNextOutgoingAttack(coordinate) {\n        this.nextOutgoingAttack = coordinate\n    }\n}\n\nmodule.exports = Human\n","const Gameboard = require('./gameboard')\n\nclass Player {\n    constructor(_name) {\n        this.name = _name\n        this.gameboard = new Gameboard()\n        this.nextOutgoingAttack = null\n        this.enemy = null\n    }\n\n    createShips() {\n        for (let i = 2; i < 6; i++) {\n            for (let j = 1; j < 7 - i; j++) {\n                this.gameboard.addShip(i)\n            }\n        }\n    }\n\n    setNextOutgoingAttack() {\n        return null\n    }\n\n    getNextOutgoingAttack() {\n        return this.nextOutgoingAttack\n    }\n\n    setEnemy(_enemy) {\n        this.enemy = _enemy\n    }\n\n    getEnemy() {\n        return this.enemy\n    }\n\n    deleteEnemy() {\n        this.enemy = null\n    }\n\n    attack() {\n        let coordinate = this.getNextOutgoingAttack()\n        this.enemy.gameboard.receiveAttack(coordinate)\n        this.nextOutgoingAttack = null\n    }\n}\n\nmodule.exports = Player\n","\nclass Ship {\n\n    static currentId = -1\n\n    constructor(_length) {\n        if (_length <= 0 || 6 <= _length) {\n            throw new Error('Ship length must be between 1 and 5')\n        }\n        this.id = this.setId()\n        this.length = _length\n        this.horizontal = true\n        this.tiles = []\n        this.hits = {}\n    }\n\n    setId() {\n        Ship.currentId++\n        return Ship.currentId\n    }\n\n    getId() {\n        return this.id\n    }\n\n    getTiles() {\n        return this.tiles\n    }\n\n    setTiles(_position) {\n        if (Number.isInteger(_position)) {\n            if (_position < 0 || _position > 99) {\n                throw new Error('position not valid')\n            }\n            this.tiles = this.chooseTiles(_position)\n            this.generateHitsObject(this.tiles)\n        } else if (Array.isArray(_position)) {\n            if (_position.length === 0 || this.length === _position.length) {\n                this.tiles = _position\n            } else {\n                throw new Error(`The number of tiles you're trying to assign does not match with the ship length`)\n            }\n        }\n    }\n\n    chooseTiles(_position) {\n        let tiles = []\n        if (this.horizontal) {\n            const row = Math.floor(_position / 10)\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (Math.floor((_position + i) / 10) === row) {\n                    tiles.push(_position + i)\n                } else {\n                    tiles.push(_position - j)\n                    j++\n                }\n                i++\n            }\n        } else {\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (_position + (i * 10) < 100) {\n                    tiles.push(_position + (i * 10))\n                } else {\n                    tiles.push(_position - (j * 10))\n                    j++\n                }\n                i++\n            }\n        }\n        tiles.sort((a, b) => a-b)\n        return tiles\n    }\n\n    generateHitsObject(tiles) {\n        this.hits = {}\n        tiles.forEach(tile => this.hits[tile] = false)\n    }\n\n    isHorizontal() {\n        return this.horizontal\n    }\n\n    toggleOrientation() {\n        this.horizontal = !this.horizontal\n    }\n\n    hit(coordinate) {\n        if (coordinate in this.hits) {\n            this.hits[coordinate] = true\n            return true\n        }\n        return false\n    }\n\n    getHits() {\n        return this.hits\n    }\n\n    isSunk() {\n        if (this.getTiles().length > 0) {\n            for(let hit of Object.values(this.hits)) {\n                if (!hit) { return false; }\n            }\n            return true\n        }\n        return false\n    }\n\n}\n\nmodule.exports = Ship\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\nconst domBoard = require('./domGameboard')\nconst domBegin = require('./domGameBegin')\n\nlet players = {'number': 1}\nlet game = new Game()\n\nconst OnePlayerButton = document.getElementById('1player')\nconst TwoPlayerButton = document.getElementById('2players')\nconst playerNamesForm = document.getElementById('player-names')\nconst preGameSettings = document.getElementById('pre-game-settings')\n\nOnePlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToOnePlayer(players)\n})\n\nTwoPlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToTwoPlayers(players)\n})\n\nfunction setGame() {\n    domBegin.startGame(game, players)\n    domBoard.createBoard('P1Board')\n    domBoard.createBoard('P1enemyBoard')\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    preGameSettings.style.display = \"none\"\n    allowShipDragging()\n    document.getElementById('stage-3').classList.remove('active-stage')\n    document.getElementById('stage-1').classList.add('active-stage')\n}\n\n// When submiting this form Ship Placement stage begins\nplayerNamesForm.addEventListener('submit', (e) => {\n    e.preventDefault()\n    setGame();\n})\n\nconst placingFinishedButton = document.getElementById('placing-finished')\nplacingFinishedButton.addEventListener('click', () => {\n    if (game.startGame()) {\n        const P1enemyBoardTiles = document.getElementById('P1enemyBoard').childNodes\n        P1enemyBoardTiles.forEach(tile => tile.addEventListener('click', attackTile))\n        document.getElementById('stage-1').classList.remove('active-stage')\n        document.getElementById('stage-2').classList.add('active-stage')\n        blockShipDragging()\n        blockShipRotations()\n    }\n})\n\nfunction attackTile(e) {\n    let tileId = parseInt(e.path[0].id.split('-')[1])\n    game.player1.setNextOutgoingAttack(tileId)\n    gameLoop()\n    this.removeEventListener('click', attackTile)\n}\n\nfunction gameLoop() {\n    game.gameTurn()\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    domBoard.renderBoard(game.player2.gameboard, 'P1enemyBoard',  'ship-container2', 'enemy')\n    if (game.getStage() === 'ended') {\n        const P1enemyBoardTiles = document.getElementById('P1enemyBoard').childNodes\n        P1enemyBoardTiles.forEach(tile => {\n            tile.removeEventListener('click', attackTile)\n        })\n        const playAgainButton = document.getElementById('play-again')\n        playAgainButton.addEventListener('click', () => {\n            game = new Game()\n            setGame()\n        })\n        document.getElementById('stage-2').classList.remove('active-stage')\n        document.getElementById('stage-3').classList.add('active-stage')\n    }\n}\n\n// Drag And Drop Ships\n\nfunction allowShipDragging() {\n    let playerBoard = document.getElementById('P1Board')\n    playerBoard.addEventListener('dragover', dragOnBoard, false)\n    playerBoard.addEventListener('dragleave', dragOffBoard, false)\n    playerBoard.addEventListener('drop', dropHandle, false)\n\n    const P1BoardTiles = document.getElementById('P1Board').childNodes\n    P1BoardTiles.forEach(tile => tile.addEventListener('dragover', dragOnTile, false))\n    P1BoardTiles.forEach(tile => tile.addEventListener('dragleave', dragOffTile, false))\n\n    // TODO: https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage agregar.\n    const outOfBoardShips = document.getElementsByClassName('out-of-board-ship')\n    for (let ship of outOfBoardShips) {\n        ship.addEventListener('dragstart', dragStarted, false)\n        ship.addEventListener('dragend', dragEnded, false)\n    }\n\n    const shipTiles = document.getElementsByClassName('tile-ship')\n    for (let shipTile of shipTiles) {\n        shipTile.addEventListener('dragstart', dragStarted, false)\n        shipTile.addEventListener('dragend', dragEnded, false)\n        shipTile.classList.add('drag-on')\n    }\n}\n\nfunction dropHandle(e) {\n    // TODO: Prevent from dropping thing that arent ships\n    e.preventDefault()\n\n    let position = parseInt(e.target.id.split('-')[1])\n    let shipId = parseInt(e.dataTransfer.getData('shipId'))\n    game.player1.gameboard.moveShip(shipId, position)\n\n    this.classList.remove('over')\n    e.target.classList.remove('over-tile')\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    allowShipDragging()\n    allowShipRotations()\n}\n\nfunction allowShipRotations() {\n    let playerBoard = document.getElementById('P1Board')\n    let shipTiles = playerBoard.querySelectorAll('.tile-ship')\n    shipTiles.forEach(tile => tile.addEventListener('click', rotateShip, false))\n}\n\nfunction rotateShip(e) {\n    let shipId = parseInt(e.target.getAttribute('data-shipid'))\n    game.player1.gameboard.rotateShip(shipId)\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    allowShipDragging()\n    allowShipRotations()\n}\n\nfunction dragStarted(e) {\n    this.style.opacity = '0.4'\n    e.dataTransfer.setData('shipId', e.target.dataset.shipid)\n}\n\nfunction dragEnded(e) {\n    this.style.opacity = '1'\n}\n\nfunction dragOnBoard(e) {\n    e.preventDefault()\n    this.classList.add('over')\n    return false\n}\n\nfunction dragOffBoard(e) {\n    e.preventDefault()\n    this.classList.remove('over')\n    return false\n}\n\nfunction dragOnTile(e) {\n    this.classList.add('over-tile')\n}\n\nfunction dragOffTile(e) {\n    this.classList.remove('over-tile')\n}\n\nfunction blockShipDragging() {\n    let playerBoard = document.getElementById('P1Board')\n    playerBoard.removeEventListener('dragover', dragOnBoard)\n    playerBoard.removeEventListener('dragleave', dragOffBoard)\n    playerBoard.removeEventListener('drop', dropHandle)\n\n    const P1BoardTiles = document.getElementById('P1Board').childNodes\n    P1BoardTiles.forEach(tile => tile.removeEventListener('dragover', dragOnTile))\n    P1BoardTiles.forEach(tile => tile.removeEventListener('dragleave', dragOffTile))\n\n    const shipTiles = document.getElementsByClassName('tile-ship')\n    for (let shipTile of shipTiles) {\n        shipTile.removeEventListener('dragstart', dragStarted)\n        shipTile.removeEventListener('dragend', dragEnded)\n        shipTile.classList.remove('drag-on')\n        shipTile.draggable = false\n    }\n}\n\nfunction blockShipRotations() {\n    let playerBoard = document.getElementById('P1Board')\n    let shipTiles = playerBoard.querySelectorAll('.tile-ship')\n    shipTiles.forEach(tile => tile.removeEventListener('click', rotateShip))\n}\n"],"sourceRoot":""}