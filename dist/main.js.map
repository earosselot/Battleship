{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domGameBegin.js","webpack://battleship/./src/domGameboard.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","notAttackedTiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","moveShip","shipId","Math","random","toggleOrientation","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","player2NameInput","document","getElementById","player1NameInput","setToOnePlayer","players","style","display","required","number","setToTwoPlayers","startGame","game","addPlayer1","value","addPlayer2","player2","createShips","relatePlayers","renderShip","DOMBoardId","ShipContainerId","getTiles","length","shipContainer","outOfBoardShip","shipLength","createElement","classList","add","tile","appendChild","createOutOfBoardShip","draggable","createBoard","DOMboardId","boardContainer","setAttribute","renderBoard","Gameboard","mode","Error","childNodes","forEach","clearBoard","renderAllShips","Human","Computer","player1","stage","winner","_playerType","_playerName","setEnemy","getStage","setStage","_stage","includes","getWinner","p1Ships","getShips","p2Ships","checkAllShipsPlaced","gameTurn","play","checkEndGame","allShipsSank","setWinner","Ship","tilesShooted","addShip","getId","removeShip","previousPosition","setTiles","shipsIntersects","ship1Id","ship2Id","ship1Tiles","ship2Tiles","tile1","tile2","rotateShip","receiveAttack","coordinate","water","hit","shipHit","isSunk","name","enemy","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","_length","setId","horizontal","tiles","hits","currentId","_position","Number","isInteger","chooseTiles","generateHitsObject","Array","isArray","row","isHorizontal","getHits","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","domBoard","domBegin","OnePlayerButton","TwoPlayerButton","playerNamesForm","preGameSettings","addEventListener","e","preventDefault","console","log"],"mappings":"2BAAA,MAAMA,EAAS,EAAQ,KAgDvBC,EAAOC,QA9CP,cAAuBF,EACnBG,YAAYC,GACRC,MAAMD,GACNE,KAAKC,iBAAmBD,KAAKE,mBAGjCC,aACI,IAAK,IAAIC,KAAQC,OAAOC,OAAON,KAAKO,UAAUC,OAAQ,CAClD,IAAIC,GAAgB,EACpB,MAAQA,GAAe,CACnB,IAAIC,EAAWV,KAAKW,mBACpBX,KAAKY,eAAeR,EAAKS,IACzBJ,EAAgBT,KAAKO,UAAUO,SAASV,EAAKS,GAAIH,KAK7DE,eAAeG,GACPC,KAAKC,SAAW,IAChBjB,KAAKO,UAAUC,MAAMO,GAAQG,oBAIrCP,mBACI,OAAOK,KAAKG,MAAsB,IAAhBH,KAAKC,UAG3BG,wBACIpB,KAAKC,iBAAmBD,KAAKqB,aAAarB,KAAKC,kBAC/CD,KAAKsB,mBAAqBtB,KAAKC,iBAAiBsB,MAGpDF,aAAaG,GAET,OADAA,EAAMC,MAAK,CAACC,EAAGC,IAAM,GAAMX,KAAKC,WACzBO,EAGXtB,mBACI,IAAIsB,EAAQ,GACZ,IAAK,IAAII,EAAI,EAAGA,EAAI,IAAKA,IACrBJ,EAAMK,KAAKD,GAEf,OAAOJ,K,QC3Cf,MAAMM,EAAmBC,SAASC,eAAe,gBAC3CC,EAAmBF,SAASC,eAAe,gBA4BjDrC,EAAOC,QAAU,CAAEsC,eA1BnB,SAAwBC,GACpBL,EAAiBM,MAAMC,QAAU,OACjCP,EAAiBQ,UAAW,EAC5BH,EAAQI,OAAS,GAuBcC,gBApBnC,SAAyBL,GACrBL,EAAiBM,MAAMC,QAAU,QACjCP,EAAiBQ,UAAW,EAC5BH,EAAQI,OAAS,GAiB+BE,UAdpD,SAAmBC,EAAMP,GACE,IAAnBA,EAAQI,QACRG,EAAKC,WAAW,QAASV,EAAiBW,OAC1CF,EAAKG,WAAW,WAAY,SAC5BH,EAAKI,QAAQC,cACbL,EAAKI,QAAQ3C,cACa,IAAnBgC,EAAQI,SACfG,EAAKC,WAAW,QAASV,EAAiBW,OAC1CF,EAAKG,WAAW,QAASf,EAAiBc,QAE9CF,EAAKM,gBACLN,EAAKD,e,QCiBT,SAASQ,EAAW7C,EAAM8C,EAAYC,GAElC,GAAyB,IADT/C,EAAKgD,WACPC,OAAc,CACxB,MAAMC,EAAgBvB,SAASC,eAAemB,GAC9C,IAAII,EAmCZ,SAA8BC,GAC1B,IAAIpD,EAAO2B,SAAS0B,cAAc,OAClCrD,EAAKsD,UAAUC,IAAI,qBACnB,IAAK,IAAIjD,EAAW,EAAGA,EAAW8C,EAAY9C,IAAY,CACtD,IAAIkD,EAAO7B,SAAS0B,cAAc,OAClCG,EAAKF,UAAUC,IAAI,QACF,IAAbjD,EACAkD,EAAKF,UAAUC,IAAI,aACZjD,IAAa8C,EAAa,GACjCI,EAAKF,UAAUC,IAAI,cAEvBvD,EAAKyD,YAAYD,GAErB,OAAOxD,EAhDkB0D,CAAqB1D,EAAKiD,QAC/CE,EAAeQ,WAAY,EAC3BT,EAAcO,YAAYN,IA8HlC5D,EAAOC,QAAU,CAAEoE,YA/KnB,SAAqBC,GACjB,MAAMC,EAAiBnC,SAASC,eAAeiC,GAC/C,IAAK,IAAIrC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIgC,EAAO7B,SAAS0B,cAAc,OAClCG,EAAKO,aAAa,KAAM,GAAGF,KAAcrC,KACzCgC,EAAKF,UAAUC,IAAI,QACnBO,EAAeL,YAAYD,KAyKHQ,YArKhC,SAAqBC,EAAWnB,EAAYC,EAAiBmB,GACzD,GAAa,WAATA,GAA8B,UAATA,EAOrB,MAAM,IAAIC,MAAM,6CAIxB,SAAoBrB,GACJnB,SAASC,eAAekB,GAAYsB,WAC1CC,SAASb,IACXA,EAAKF,UAAY,GACjBE,EAAKF,UAAUC,IAAI,WAdnBe,CAAWxB,GACE,WAAToB,GAiBZ,SAAwBD,EAAWnB,EAAYC,GAC3C,IAAK/C,QAAQC,OAAOC,OAAO+D,EAAU7D,OACjCyC,EAAW7C,KAAM8C,EAAYC,GAlBzBwB,CAAeN,EAAWnB,EAAYC,M,cCflD,MAAMyB,EAAQ,EAAQ,KAChBC,EAAW,EAAQ,KA8HzBlF,EAAOC,QA5HP,MACIC,cACIG,KAAK8E,QAAU,KACf9E,KAAK8C,QAAU,KACf9C,KAAK+E,MAAQ,UACb/E,KAAKgF,OAAS,KAGlBrC,WAAWsC,EAAaC,GACpB,GAAoB,UAAhBD,EACAjF,KAAK8E,QAAU,IAAIF,EAAMM,OACtB,IAAoB,aAAhBD,EAGP,MAAM,IAAIV,MAAM,2DAFhBvE,KAAK8E,QAAU,IAAID,EAASK,IAMpCrC,WAAWoC,EAAaC,GACpB,GAAoB,UAAhBD,EACAjF,KAAK8C,QAAU,IAAI8B,EAAMM,OACtB,IAAoB,aAAhBD,EAGP,MAAM,IAAIV,MAAM,2DAFhBvE,KAAK8C,QAAU,IAAI+B,EAASK,IAMpClC,gBACIhD,KAAK8E,QAAQK,SAASnF,KAAK8C,SAC3B9C,KAAK8C,QAAQqC,SAASnF,KAAK8E,SAG/BM,WACI,OAAOpF,KAAK+E,MAGhBM,SAASC,GAEL,IADe,CAAC,UAAW,SAAU,SAC1BC,SAASD,GAGhB,MAAM,IAAIf,MAAM,mCAFhBvE,KAAK+E,MAAQO,EAMrBE,YACI,OAAOxF,KAAKgF,OAGhBvC,YACI,GAAwB,YAApBzC,KAAKoF,WAA0B,CAC/B,IAAIK,EAAUzF,KAAK8E,QAAQvE,UAAUmF,WACjCC,EAAU3F,KAAK8C,QAAQvC,UAAUmF,WACrC,SAAI1F,KAAK4F,oBAAoBH,KAAYzF,KAAK4F,oBAAoBD,KAC9D3F,KAAKqF,SAAS,UACP,IAKX,MAAM,IAAId,MAAM,6DAIxBqB,oBAAoBpF,GAChB,IAAK,IAAIJ,KAAQC,OAAOC,OAAOE,GAC3B,GAA+B,IAA3BJ,EAAKgD,WAAWC,OAChB,OAAO,EAGf,OAAO,EAGXwC,WACI,GAAwB,WAApB7F,KAAKoF,WA0BL,MAAM,IAAIb,MAAM,2CAzBZvE,KAAK8E,mBAAmBF,GAAS5E,KAAK8C,mBAAmB+B,GACzD7E,KAAK8E,QAAQgB,OACb9F,KAAK8C,QAAQ1B,wBACbpB,KAAK8C,QAAQgD,OACb9F,KAAK+F,gBACE/F,KAAK8E,mBAAmBD,GAAY7E,KAAK8C,mBAAmB8B,GACnE5E,KAAK8E,QAAQ1D,wBACbpB,KAAK8E,QAAQgB,OACb9F,KAAK8C,QAAQgD,OACb9F,KAAK+F,gBACE/F,KAAK8E,mBAAmBD,GAAY7E,KAAK8C,mBAAmB+B,GACnE7E,KAAK8E,QAAQ1D,wBACbpB,KAAK8E,QAAQgB,OACb9F,KAAK8C,QAAQ1B,wBACbpB,KAAK8C,QAAQgD,OACb9F,KAAK+F,gBACE/F,KAAK8E,mBAAmBF,GAAS5E,KAAK8C,mBAAmB8B,IAC5D5E,KAAK8E,QAAQxD,mBACbtB,KAAK8E,QAAQgB,OACN9F,KAAK8C,QAAQxB,qBACpBtB,KAAK8C,QAAQgD,OACb9F,KAAK+F,iBASrBA,gBACQ/F,KAAK8E,QAAQvE,UAAUyF,gBAAkBhG,KAAK8C,QAAQvC,UAAUyF,kBAChEhG,KAAKqF,SAAS,SACdrF,KAAKiG,aAIbA,YACQjG,KAAK8E,QAAQvE,UAAUyF,gBAAkBhG,KAAK8C,QAAQvC,UAAUyF,eAChEhG,KAAKgF,OAAS,MACPhF,KAAK8E,QAAQvE,UAAUyF,eAC9BhG,KAAKgF,OAAShF,KAAK8C,QACZ9C,KAAK8C,QAAQvC,UAAUyF,iBAC9BhG,KAAKgF,OAAShF,KAAK8E,Y,cC1H/B,MAAMoB,EAAO,EAAQ,KAuFrBvG,EAAOC,QArFP,MAEIC,cACIG,KAAKQ,MAAQ,GACbR,KAAKmG,aAAe,CAAC,MAAS,GAAI,IAAO,IAG7CC,QAAQ5C,GACJ,IAAIpD,EAAO,IAAI8F,EAAK1C,GAEpB,OADAxD,KAAKQ,MAAMJ,EAAKiG,SAAWjG,EACpBJ,KAAKQ,MAAMJ,EAAKiG,SAG3BC,WAAWvF,UACAf,KAAKQ,MAAMO,GAGtB2E,WACI,OAAO1F,KAAKQ,MAGhBM,SAASC,EAAQL,GACb,IAAI6F,EAAmBvG,KAAKQ,MAAMO,GAAQqC,WAC1CpD,KAAKQ,MAAMO,GAAQyF,SAAS9F,GAC5B,IAAK,IAAIN,KAAQC,OAAOC,OAAON,KAAKQ,OAChC,GAAIJ,EAAKiG,UAAYtF,GAAUf,KAAKyG,gBAAgBrG,EAAKiG,QAAStF,GAE9D,OADAf,KAAKQ,MAAMO,GAAQyF,SAASD,IACrB,EAGf,OAAQ,EAGZE,gBAAgBC,EAASC,GACrB,IAAIC,EAAa5G,KAAKQ,MAAMkG,GAAStD,WACjCyD,EAAa7G,KAAKQ,MAAMmG,GAASvD,WACrC,IAAK,IAAI0D,KAASF,EACd,IAAK,IAAIG,KAASF,EACd,GAAIC,IAAUC,EACV,OAAO,EAInB,OAAO,EAGXC,WAAWjG,GACP,GAA6C,IAAzCf,KAAKQ,MAAMO,GAAQqC,WAAWC,OAC9B,MAAM,IAAIkB,MAAM,uCAEpBvE,KAAKQ,MAAMO,GAAQG,oBACnB,IAAIqF,EAAmBvG,KAAKQ,MAAMO,GAAQqC,WAC1C,OAAOpD,KAAKc,SAASC,EAAQwF,EAAiB,IAGlDU,cAAcC,GACV,OAAIlH,KAAKmG,aAAagB,MAAM5B,SAAS2B,KAAelH,KAAKmG,aAAaiB,IAAI7B,SAAS2B,KAG/ElH,KAAKqH,QAAQH,GACblH,KAAKmG,aAAaiB,IAAIvF,KAAKqF,GAE3BlH,KAAKmG,aAAagB,MAAMtF,KAAKqF,IAE1B,GAGXG,QAAQH,GACJ,IAAIG,GAAU,EACd,IAAK,IAAIjH,KAAQC,OAAOC,OAAON,KAAKQ,OAChC6G,EAAUA,GAAWjH,EAAKgH,IAAIF,GAElC,OAAOG,EAGXrB,eACI,IAAK,IAAI5F,KAAQC,OAAOC,OAAON,KAAKQ,OAChC,IAAKJ,EAAKkH,SACN,OAAO,EAGf,OAAO,K,cCnFf,MAAM5H,EAAS,EAAQ,KAYvBC,EAAOC,QAVP,cAAoBF,EAChBG,YAAYC,GACRC,MAAMD,GAGVsB,sBAAsB8F,GAClBlH,KAAKsB,mBAAqB4F,K,cCRlC,MAAM7C,EAAY,EAAQ,KA6C1B1E,EAAOC,QA3CP,MACIC,YAAYC,GACRE,KAAKuH,KAAOzH,EACZE,KAAKO,UAAY,IAAI8D,EACrBrE,KAAKsB,mBAAqB,KAC1BtB,KAAKwH,MAAQ,KAGjBzE,cACI,IAAK,IAAInB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAI6F,EAAI,EAAGA,EAAI,EAAI7F,EAAG6F,IACvBzH,KAAKO,UAAU6F,QAAQxE,GAKnCR,wBACI,OAAO,KAGXsG,wBACI,OAAO1H,KAAKsB,mBAGhB6D,SAASwC,GACL3H,KAAKwH,MAAQG,EAGjBC,WACI,OAAO5H,KAAKwH,MAGhBK,cACI7H,KAAKwH,MAAQ,KAGjB1B,OACI,IAAIoB,EAAalH,KAAK0H,wBACtB1H,KAAKwH,MAAMjH,UAAU0G,cAAcC,GACnClH,KAAKsB,mBAAqB,Q,QCxClC,MAAM4E,EAEF,kBAAoB,EAEpBrG,YAAYiI,GACR,GAAIA,GAAW,GAAK,GAAKA,EACrB,MAAM,IAAIvD,MAAM,uCAEpBvE,KAAKa,GAAKb,KAAK+H,QACf/H,KAAKqD,OAASyE,EACd9H,KAAKgI,YAAa,EAClBhI,KAAKiI,MAAQ,GACbjI,KAAKkI,KAAO,GAGhBH,QAEI,OADA7B,EAAKiC,YACEjC,EAAKiC,UAGhB9B,QACI,OAAOrG,KAAKa,GAGhBuC,WACI,OAAOpD,KAAKiI,MAGhBzB,SAAS4B,GACL,GAAIC,OAAOC,UAAUF,GAAY,CAC7B,GAAIA,EAAY,GAAKA,EAAY,GAC7B,MAAM,IAAI7D,MAAM,sBAEpBvE,KAAKiI,MAAQjI,KAAKuI,YAAYH,GAC9BpI,KAAKwI,mBAAmBxI,KAAKiI,YAC1B,GAAIQ,MAAMC,QAAQN,GAAY,CACjC,GAAyB,IAArBA,EAAU/E,QAAgBrD,KAAKqD,SAAW+E,EAAU/E,OAGpD,MAAM,IAAIkB,MAAM,mFAFhBvE,KAAKiI,MAAQG,GASzBG,YAAYH,GACR,IAAIH,EAAQ,GACZ,GAAIjI,KAAKgI,WAAY,CACjB,MAAMW,EAAM3H,KAAKG,MAAMiH,EAAY,IACnC,IAAIxG,EAAI,EACJ6F,EAAI,EACR,KAAO7F,EAAI5B,KAAKqD,QACRrC,KAAKG,OAAOiH,EAAYxG,GAAK,MAAQ+G,EACrCV,EAAMpG,KAAKuG,EAAYxG,IAEvBqG,EAAMpG,KAAKuG,EAAYX,GACvBA,KAEJ7F,QAED,CACH,IAAIA,EAAI,EACJ6F,EAAI,EACR,KAAO7F,EAAI5B,KAAKqD,QACR+E,EAAiB,GAAJxG,EAAU,IACvBqG,EAAMpG,KAAKuG,EAAiB,GAAJxG,IAExBqG,EAAMpG,KAAKuG,EAAiB,GAAJX,GACxBA,KAEJ7F,IAIR,OADAqG,EAAMxG,MAAK,CAACC,EAAGC,IAAMD,EAAEC,IAChBsG,EAGXO,mBAAmBP,GACfjI,KAAKkI,KAAO,GACZD,EAAMxD,SAAQb,GAAQ5D,KAAKkI,KAAKtE,IAAQ,IAG5CgF,eACI,OAAO5I,KAAKgI,WAGhB9G,oBACIlB,KAAKgI,YAAchI,KAAKgI,WAG5BZ,IAAIF,GACA,OAAIA,KAAclH,KAAKkI,OACnBlI,KAAKkI,KAAKhB,IAAc,GACjB,GAKf2B,UACI,OAAO7I,KAAKkI,KAGhBZ,SACI,IAAI,IAAIF,KAAO/G,OAAOC,OAAON,KAAKkI,MAC9B,IAAKd,EAAO,OAAO,EAEvB,OAAO,GAIfzH,EAAOC,QAAUsG,IC/Gb4C,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAarJ,QAGrB,IAAID,EAASmJ,EAAyBE,GAAY,CAGjDpJ,QAAS,IAOV,OAHAuJ,EAAoBH,GAAUrJ,EAAQA,EAAOC,QAASmJ,GAG/CpJ,EAAOC,Q,MCrBf,MAAMwJ,EAAO,EAAQ,KACfC,EAAW,EAAQ,KACnBC,EAAW,EAAQ,KAEzB,IAAInH,EAAU,CAAC,OAAU,GACrBO,EAAO,IAAI0G,EAEf,MAAMG,EAAkBxH,SAASC,eAAe,WAC1CwH,EAAkBzH,SAASC,eAAe,YAC1CyH,EAAkB1H,SAASC,eAAe,gBAC1C0H,EAAkB3H,SAASC,eAAe,qBAEhDuH,EAAgBI,iBAAiB,SAAUC,IACvCA,EAAEC,iBACFP,EAASpH,eAAeC,MAG5BqH,EAAgBG,iBAAiB,SAAUC,IACvCA,EAAEC,iBACFP,EAAS9G,gBAAgBL,MAI7BsH,EAAgBE,iBAAiB,UAAWC,IACxCA,EAAEC,iBACFP,EAAS7G,UAAUC,EAAMP,GACzBkH,EAASrF,YAAY,WACrBqF,EAASrF,YAAY,gBACrBtB,EAAKoC,QAAQ/B,cACbsG,EAASjF,YAAY1B,EAAKoC,QAAQvE,UAAW,UAAW,iBAAkB,UAC1EmJ,EAAgBtH,MAAMC,QAAU,UAIlBN,SAASC,eAAe,oBAChC2H,iBAAiB,SAAS,KAChCG,QAAQC,IAAIrH,O","file":"main.js","sourcesContent":["const Player = require('./player')\n\nclass Computer extends Player {\n    constructor(_name) {\n        super(_name)\n        this.notAttackedTiles = this.makeArrayOfTiles()\n    }\n\n    placeShips() {\n        for (let ship of Object.values(this.gameboard.ships)) {\n            let validPosition = false\n            while (!validPosition) {\n                let position = this.generatePosition()\n                this.randomRotation(ship.id)\n                validPosition = this.gameboard.moveShip(ship.id, position)\n            }\n        }\n    }\n\n    randomRotation(shipId) {\n        if (Math.random() < 0.5) {\n            this.gameboard.ships[shipId].toggleOrientation()\n        }\n    }\n\n    generatePosition() {\n        return Math.floor(Math.random() * 100)\n    }\n\n    setNextOutgoingAttack() {\n        this.notAttackedTiles = this.shuffleArray(this.notAttackedTiles)\n        this.nextOutgoingAttack = this.notAttackedTiles.pop()\n    }\n\n    shuffleArray(array) {\n        array.sort((a, b) => 0.5 - Math.random())\n        return array\n    }\n\n    makeArrayOfTiles() {\n        let array = []\n        for (let i = 0; i < 100; i++) {\n            array.push(i)\n        }\n        return array\n    }\n}\n\nmodule.exports = Computer\n","\nconst player2NameInput = document.getElementById('player2-name')\nconst player1NameInput = document.getElementById('player1-name')\n\nfunction setToOnePlayer(players) {\n    player2NameInput.style.display = 'none'\n    player2NameInput.required = false\n    players.number = 1\n}\n\nfunction setToTwoPlayers(players) {\n    player2NameInput.style.display = 'block'\n    player2NameInput.required = true\n    players.number = 2\n}\n\nfunction startGame(game, players) {\n    if (players.number === 1) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('computer', 'r2-d2')\n        game.player2.createShips()\n        game.player2.placeShips()\n    } else if (players.number === 2) {\n        game.addPlayer1('human', player1NameInput.value)\n        game.addPlayer2('human', player2NameInput.value)\n    }\n    game.relatePlayers()\n    game.startGame()\n}\n\nmodule.exports = { setToOnePlayer, setToTwoPlayers, startGame }","\nfunction createBoard(DOMboardId) {\n    const boardContainer = document.getElementById(DOMboardId);\n    for (let i = 0; i < 100; i++) {\n        let tile = document.createElement('div')\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\n        tile.classList.add('tile')\n        boardContainer.appendChild(tile)\n    }\n}\n\nfunction renderBoard(Gameboard, DOMBoardId, ShipContainerId, mode) {\n    if (mode === 'player' || mode === 'enemy') {\n        clearBoard(DOMBoardId)\n        if (mode === 'player') {\n            renderAllShips(Gameboard, DOMBoardId, ShipContainerId)\n        }\n        // renderShoots(Gameboard, DOMBoardId)\n    } else {\n        throw new Error('mode not valid, try with player or enemy')\n    }\n}\n\nfunction clearBoard(DOMBoardId) {\n    let tiles = document.getElementById(DOMBoardId).childNodes\n    tiles.forEach( tile => {\n        tile.classList = ''\n        tile.classList.add('tile')\n    })\n}\n\nfunction renderAllShips(Gameboard, DOMBoardId, ShipContainerId) {\n    for (ship of Object.values(Gameboard.ships)) {\n        renderShip(ship, DOMBoardId, ShipContainerId)\n    }\n}\n\n// Si la nave esta en el tablero:\n//     Argega a cada tile del tablero donde esta la nave (ship.tiles) las clases 'tile-ship', 'no-dop',\n//     y 'ship-left/right/top/bottom' segun corresponda.\n//     Sino hace lo mismo pero en el shipContainer de id shipContainerId\n// Tambien le agrega el atributo 'data-ship-id' con valor ship.id\n// Tambien les agrega el atributo draggable a todas las naves\n\nfunction renderShip(ship, DOMBoardId, ShipContainerId) {\n    let shipTiles = ship.getTiles()\n    if (shipTiles.length === 0) {\n        const shipContainer = document.getElementById(ShipContainerId)\n        let outOfBoardShip = createOutOfBoardShip(ship.length)\n        outOfBoardShip.draggable = true\n        shipContainer.appendChild(outOfBoardShip)\n    }\n\n\n    //\n    // if (ship.horizontal) {\n    //     for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n    //         let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n    //         if (shipPositionDelta === 0) {\n    //             shipTile.classList.add('ship-left')\n    //         } else if (shipPositionDelta === ship.length - 1) {\n    //             shipTile.classList.add('ship-right')\n    //         }\n    //         shipTile.classList.add('tile-ship')\n    //         shipTile.classList.add('no-drop')\n    //         shipTile.setAttribute('data-ship-id', ship.getId())\n    //     }\n    // } else {\n    //     for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n    //         let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n    //         if (shipPositionDelta === 0) {\n    //             shipTile.classList.add('ship-top')\n    //         } else if (shipPositionDelta === ship.length - 1) {\n    //             shipTile.classList.add('ship-bottom')\n    //         }\n    //         shipTile.classList.add('tile-ship')\n    //         shipTile.classList.add('no-drop')\n    //         shipTile.setAttribute('data-ship-id', ship.getId())\n    //     }\n    // }\n}\n\n\nfunction createOutOfBoardShip(shipLength) {\n    let ship = document.createElement('div')\n    ship.classList.add('out-of-board-ship')\n    for (let position = 0; position < shipLength; position++) {\n        let tile = document.createElement('div')\n        tile.classList.add('tile')\n        if (position === 0) {\n            tile.classList.add('ship-left')\n        } else if (position === shipLength - 1) {\n            tile.classList.add('ship-right')\n        }\n        ship.appendChild(tile)\n    }\n    return ship\n}\n\n// function renderPlayerBoard(playerGameboard, DOMBoardId) {\n//     clearBoard(DOMBoardId)\n//     renderAllShips(playerGameboard, DOMBoardId)\n//     showShotedWaterTiles(playerGameboard, DOMBoardId)\n//     showShotedHitTiles(playerGameboard, DOMBoardId)\n//     showSunkShipTiles(playerGameboard, DOMBoardId)\n// }\n//\n// function renderShoots(Gameboard, DOMBoardId) {\n//     showShotedWaterTiles(Gameboard, DOMBoardId)\n//     showShotedHitTiles(Gameboard, DOMBoardId)\n//     showSunkShipTiles(Gameboard, DOMBoardId)\n// }\n\n\n//\n//\n//\n//\n//\n// function showShotedWaterTiles(playerGameboard, DOMBoardId) {\n//     for (tileId of playerGameboard.tilesShoted.water) {\n//         let tileWater = document.getElementById(`${DOMBoardId}-${tileId}`)\n//         tileWater.classList.add('tile-water')\n//         addShootMarker(tileWater)\n//     }\n// }\n//\n// function showShotedHitTiles(playerGameboard, DOMBoardId) {\n//     for (tileId of playerGameboard.tilesShoted.hit) {\n//         let tileHit = document.getElementById(`${DOMBoardId}-${tileId}`)\n//         tileHit.classList.remove('tile-ship')\n//         tileHit.classList.add('tile-hit')\n//         addShootMarker(tileHit)\n//     }\n// }\n//\n// function addShootMarker(tile) {\n//     const hitMarker = document.createElement('div')\n//     hitMarker.classList.add('shoot')\n//     tile.innerHTML = ''\n//     tile.appendChild(hitMarker)\n// }\n//\n// function showSunkShipTiles(playerGameboard, DOMBoardId) {\n//     let sunkShips = playerGameboard.getSunkShips()\n//     for (shipId of sunkShips) {\n//         showSunkShip(playerGameboard.ships[shipId], DOMBoardId)\n//     }\n// }\n//\n// function showSunkShip(ship, DOMBoardId) {\n//     if (ship.horizontal) {\n//         for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n//             let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n//             if (shipPositionDelta === 0) {\n//                 shipTile.classList.add('ship-left')\n//             } else if (shipPositionDelta === ship.length - 1) {\n//                 shipTile.classList.add('ship-right')\n//             }\n//             shipTile.classList.remove('tile-hit')\n//             shipTile.classList.add('tile-sunk')\n//         }\n//     } else {\n//         for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n//             let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n//             if (shipPositionDelta === 0) {\n//                 shipTile.classList.add('ship-top')\n//             } else if (shipPositionDelta === ship.length - 1) {\n//                 shipTile.classList.add('ship-bottom')\n//             }\n//             shipTile.classList.remove('tile-hit')\n//             shipTile.classList.add('tile-sunk')\n//         }\n//     }\n// }\n\nmodule.exports = { createBoard, renderBoard }\n","const Human = require('./humanPlayer')\nconst Computer = require('./computerPlayer')\n\nclass Game {\n    constructor() {\n        this.player1 = null\n        this.player2 = null\n        this.stage = 'preGame'\n        this.winner = null\n    }\n\n    addPlayer1(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player1 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player1 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    addPlayer2(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            this.player2 = new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            this.player2 = new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    relatePlayers() {\n        this.player1.setEnemy(this.player2)\n        this.player2.setEnemy(this.player1)\n    }\n\n    getStage() {\n        return this.stage\n    }\n\n    setStage(_stage) {\n        const stages = ['preGame', 'inGame', 'ended']\n        if (stages.includes(_stage)) {\n            this.stage = _stage\n        } else {\n            throw new Error('stage is not a valid game stage')\n        }\n    }\n\n    getWinner() {\n        return this.winner\n    }\n\n    startGame() {\n        if (this.getStage() === 'preGame') {\n            let p1Ships = this.player1.gameboard.getShips()\n            let p2Ships = this.player2.gameboard.getShips()\n            if (this.checkAllShipsPlaced(p1Ships) && this.checkAllShipsPlaced(p2Ships)) {\n                this.setStage('inGame')\n                return true\n            } else {\n                return false\n            }\n        } else {\n            throw new Error('Game has already been started. Try to reset to start over')\n        }\n    }\n\n    checkAllShipsPlaced(ships) {\n        for (let ship of Object.values(ships)) {\n            if (ship.getTiles().length === 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    gameTurn() {\n        if (this.getStage() === 'inGame') {\n            if (this.player1 instanceof Human && this.player2 instanceof Computer) {\n                this.player1.play()\n                this.player2.setNextOutgoingAttack()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Human) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.play()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Computer && this.player2 instanceof Computer) {\n                this.player1.setNextOutgoingAttack()\n                this.player1.play()\n                this.player2.setNextOutgoingAttack()\n                this.player2.play()\n                this.checkEndGame()\n            } else if (this.player1 instanceof Human && this.player2 instanceof Human) {\n                if (this.player1.nextOutgoingAttack) {\n                    this.player1.play()\n                } else if (this.player2.nextOutgoingAttack) {\n                    this.player2.play()\n                    this.checkEndGame()\n                }\n            }\n        } else {\n            throw new Error('cannot play if the game has not started')\n        }\n\n    }\n\n    checkEndGame() {\n        if (this.player1.gameboard.allShipsSank() || this.player2.gameboard.allShipsSank()) {\n            this.setStage('ended')\n            this.setWinner()\n        }\n    }\n\n    setWinner() {\n        if (this.player1.gameboard.allShipsSank() && this.player2.gameboard.allShipsSank()) {\n            this.winner = 'tie'\n        } else if (this.player1.gameboard.allShipsSank()) {\n            this.winner = this.player2\n        } else if (this.player2.gameboard.allShipsSank()) {\n            this.winner = this.player1\n        }\n    }\n}\n\nmodule.exports = Game\n","const Ship = require('./ship');\n\nclass Gameboard {\n\n    constructor() {\n        this.ships = {}\n        this.tilesShooted = {'water': [], 'hit': []}\n    }\n\n    addShip(shipLength) {\n        let ship = new Ship(shipLength)\n        this.ships[ship.getId()] = ship\n        return this.ships[ship.getId()]\n    }\n\n    removeShip(shipId) {\n        delete this.ships[shipId]\n    }\n\n    getShips() {\n        return this.ships\n    }\n\n    moveShip(shipId, position) {\n        let previousPosition = this.ships[shipId].getTiles()\n        this.ships[shipId].setTiles(position)\n        for (let ship of Object.values(this.ships)) {\n            if (ship.getId() !== shipId && this.shipsIntersects(ship.getId(), shipId)) {\n                this.ships[shipId].setTiles(previousPosition)\n                return false\n            }\n        }\n        return  true\n    }\n\n    shipsIntersects(ship1Id, ship2Id) {\n        let ship1Tiles = this.ships[ship1Id].getTiles()\n        let ship2Tiles = this.ships[ship2Id].getTiles()\n        for (let tile1 of ship1Tiles) {\n            for (let tile2 of ship2Tiles) {\n                if (tile1 === tile2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    rotateShip(shipId) {\n        if (this.ships[shipId].getTiles().length === 0) {\n            throw new Error(`Can't rotate ship outside the board`)\n        }\n        this.ships[shipId].toggleOrientation()\n        let previousPosition = this.ships[shipId].getTiles()\n        return this.moveShip(shipId, previousPosition[0])\n    }\n\n    receiveAttack(coordinate) {\n        if (this.tilesShooted.water.includes(coordinate) || this.tilesShooted.hit.includes(coordinate)) {\n            return false\n        }\n        if (this.shipHit(coordinate)) {\n            this.tilesShooted.hit.push(coordinate)\n        } else {\n            this.tilesShooted.water.push(coordinate)\n        }\n        return true\n    }\n\n    shipHit(coordinate){\n        let shipHit = false\n        for (let ship of Object.values(this.ships)) {\n            shipHit = shipHit || ship.hit(coordinate)\n        }\n        return shipHit\n    }\n\n    allShipsSank() {\n        for (let ship of Object.values(this.ships)) {\n            if (!ship.isSunk()) {\n                return false\n            }\n        }\n        return true\n    }\n}\n\nmodule.exports = Gameboard\n","const Player = require('./player')\n\nclass Human extends Player {\n    constructor(_name) {\n        super(_name)\n    }\n\n    setNextOutgoingAttack(coordinate) {\n        this.nextOutgoingAttack = coordinate\n    }\n}\n\nmodule.exports = Human\n","const Gameboard = require('./gameboard')\n\nclass Player {\n    constructor(_name) {\n        this.name = _name\n        this.gameboard = new Gameboard()\n        this.nextOutgoingAttack = null\n        this.enemy = null\n    }\n\n    createShips() {\n        for (let i = 2; i < 6; i++) {\n            for (let j = 1; j < 7 - i; j++) {\n                this.gameboard.addShip(i)\n            }\n        }\n    }\n\n    setNextOutgoingAttack() {\n        return null\n    }\n\n    getNextOutgoingAttack() {\n        return this.nextOutgoingAttack\n    }\n\n    setEnemy(_enemy) {\n        this.enemy = _enemy\n    }\n\n    getEnemy() {\n        return this.enemy\n    }\n\n    deleteEnemy() {\n        this.enemy = null\n    }\n\n    play() {\n        let coordinate = this.getNextOutgoingAttack()\n        this.enemy.gameboard.receiveAttack(coordinate)\n        this.nextOutgoingAttack = null\n    }\n}\n\nmodule.exports = Player\n","\nclass Ship {\n\n    static currentId = -1\n\n    constructor(_length) {\n        if (_length <= 0 || 6 <= _length) {\n            throw new Error('Ship length must be between 1 and 5')\n        }\n        this.id = this.setId()\n        this.length = _length\n        this.horizontal = true\n        this.tiles = []\n        this.hits = {}\n    }\n\n    setId() {\n        Ship.currentId++\n        return Ship.currentId\n    }\n\n    getId() {\n        return this.id\n    }\n\n    getTiles() {\n        return this.tiles\n    }\n\n    setTiles(_position) {\n        if (Number.isInteger(_position)) {\n            if (_position < 0 || _position > 99) {\n                throw new Error('position not valid')\n            }\n            this.tiles = this.chooseTiles(_position)\n            this.generateHitsObject(this.tiles)\n        } else if (Array.isArray(_position)) {\n            if (_position.length === 0 || this.length === _position.length) {\n                this.tiles = _position\n            } else {\n                throw new Error(`The number of tiles you're trying to assign does not match with the ship length`)\n            }\n\n        }\n\n    }\n\n    chooseTiles(_position) {\n        let tiles = []\n        if (this.horizontal) {\n            const row = Math.floor(_position / 10)\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (Math.floor((_position + i) / 10) === row) {\n                    tiles.push(_position + i)\n                } else {\n                    tiles.push(_position - j)\n                    j++\n                }\n                i++\n            }\n        } else {\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (_position + (i * 10) < 100) {\n                    tiles.push(_position + (i * 10))\n                } else {\n                    tiles.push(_position - (j * 10))\n                    j++\n                }\n                i++\n            }\n        }\n        tiles.sort((a, b) => a-b)\n        return tiles\n    }\n\n    generateHitsObject(tiles) {\n        this.hits = {}\n        tiles.forEach(tile => this.hits[tile] = false)\n    }\n\n    isHorizontal() {\n        return this.horizontal\n    }\n\n    toggleOrientation() {\n        this.horizontal = !this.horizontal\n    }\n\n    hit(coordinate) {\n        if (coordinate in this.hits) {\n            this.hits[coordinate] = true\n            return true\n        }\n        return false\n    }\n\n    getHits() {\n        return this.hits\n    }\n\n    isSunk() {\n        for(let hit of Object.values(this.hits)) {\n            if (!hit) { return false; }\n        }\n        return true\n    }\n}\n\nmodule.exports = Ship\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\nconst domBoard = require('./domGameboard')\nconst domBegin = require('./domGameBegin')\n\nlet players = {'number': 1}\nlet game = new Game()\n\nconst OnePlayerButton = document.getElementById('1player')\nconst TwoPlayerButton = document.getElementById('2players')\nconst playerNamesForm = document.getElementById('player-names')\nconst preGameSettings = document.getElementById('pre-game-settings')\n\nOnePlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToOnePlayer(players)\n})\n\nTwoPlayerButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    domBegin.setToTwoPlayers(players)\n})\n\n// When submiting this form Ship Placement stage begins\nplayerNamesForm.addEventListener('submit', (e) => {\n    e.preventDefault()\n    domBegin.startGame(game, players)\n    domBoard.createBoard('P1Board')\n    domBoard.createBoard('P1enemyBoard')\n    game.player1.createShips()\n    domBoard.renderBoard(game.player1.gameboard, 'P1Board', 'ship-container', 'player')\n    preGameSettings.style.display = \"none\"\n})\n\n\nconst button111 = document.getElementById('placing-finished')\nbutton111.addEventListener('click', () => {\n    console.log(game)\n})\n\n// domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//\n// const P1enemyBoardTiles = document.getElementById('P1enemyBoard').childNodes\n//\n// P1enemyBoardTiles.forEach(tile => tile.addEventListener('click', attackTile))\n//\n// function attackTile(e) {\n//     let tileId = e.path[0].id.split('-')[1]\n//     game.player1.setNextOutgoingAttack(tileId)\n//     gameLoop()\n//     this.removeEventListener('click', attackTile)\n// }\n//\n// function gameLoop() {\n//     game.gameTurn()\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     domBoard.renderEnemyBoard(game.player2.gameboard, 'P1enemyBoard')\n//     if (game.getGameEnded()) {\n//         P1enemyBoardTiles.forEach(tile => {\n//             tile.removeEventListener('click', attackTile)\n//         })\n//     }\n// }\n//\n// Drag And Drop Ships\n//\n// let playerBoard\n// let draggingElement\n// const P1BoardTiles = document.getElementById('P1Board').childNodes\n//\n// function initShipPlacement() {\n//     playerBoard = document.getElementById('P1Board')\n//     playerBoard.addEventListener('dragover', dragOnBoard, false)\n//     playerBoard.addEventListener('dragleave', dragOffBoard, false)\n//     playerBoard.addEventListener('drop', dropHandle, false)\n//\n//     P1BoardTiles.forEach(tile => tile.addEventListener('dragover', dragOnTile, false))\n//     P1BoardTiles.forEach(tile => tile.addEventListener('dragleave', dragOffTile, false))\n//\n//     const outOfBoardShips = document.getElementsByClassName('out-of-board-ship')\n//     for (let ship of outOfBoardShips) {\n//         ship.addEventListener('dragstart', dragStarted, false)\n//         ship.addEventListener('dragend', dragEnded, false)\n//     }\n// }\n//\n// function dropHandle(e) {\n//     // TODO: Prevent from dropping thing that arent ships\n//     e.preventDefault()\n//     if (!e.target.classList.contains('no-drop')) {\n//         let position = parseInt(e.target.id.split('-')[1])\n//         let shipLength = e.dataTransfer.getData('shipLength')\n//         let ship = game.player1.gameboard.addShip(shipLength)\n//         let valid = game.player1.gameboard.moveShip(ship.getId(), position)\n//         if (valid) {\n//             draggingElement.parentNode.removeChild(draggingElement)\n//\n//         } else {\n//             delete game.player1.gameboard.removeShip(ship.getId())\n//         }\n//     }\n//     this.classList.remove('over')\n//     e.target.classList.remove('over-tile')\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     allowShipRotations()\n// }\n//\n// function allowShipRotations() {\n//     let shipTiles = playerBoard.querySelectorAll('.tile-ship')\n//     console.log(shipTiles)\n//     shipTiles.forEach(tile => tile.addEventListener('click', rotateShip, false))\n// }\n//\n// function rotateShip(e) {\n//     let shipId = parseInt(e.target.getAttribute('data-ship-id'))\n//     game.player1.gameboard.rotateShip(shipId)\n//     domBoard.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n//     console.log(game.player1.gameboard)\n// }\n//\n// function dragStarted(e) {\n//     draggingElement = this\n//     this.style.opacity = '0.4'\n//     e.dataTransfer.setData('shipLength', e.target.childElementCount)\n// }\n//\n// function dragEnded(e) {\n//     this.style.opacity = '1'\n// }\n//\n// function dragOnBoard(e) {\n//     e.preventDefault()\n//     this.classList.add('over')\n//     return false\n// }\n//\n// function dragOffBoard(e) {\n//     e.preventDefault()\n//     this.classList.remove('over')\n//     return false\n// }\n//\n// function dragOnTile(e) {\n//     this.classList.add('over-tile')\n// }\n//\n// function dragOffTile(e) {\n//     this.classList.remove('over-tile')\n// }\n//\n// initShipPlacement()\n"],"sourceRoot":""}