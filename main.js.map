{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domManipulation.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","tiles","makeArrayOfTiles","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","Math","random","i","push","showPlayerShip","ship","DOMBoardId","horizontal","shipPositionDelta","length","shipTile","document","getElementById","position","classList","add","showShotedWaterTiles","playerGameboard","tileId","tilesShoted","water","tileWater","addHitMarker","showShotedHitTiles","hit","tileHit","tile","hitMarker","createElement","innerHTML","appendChild","showSunkShip","remove","createBoard","DOMboardId","boardContainer","setAttribute","renderPlayerBoard","Object","values","ships","showShips","renderEnemyBoard","enemyGameboard","sunkShips","shipId","showSunkShipTiles","Human","Computer","_player1Type","_p1name","_player2Type","_p2name","player1","createPlayer","player2","relatePlayers","gameEnded","winner","getGameEnded","getWinner","_playerType","_playerName","Error","setEnemy","gameTurn","play","checkEndGame","gameboard","allShipsSank","setWinner","Ship","tilesWithShips","addShip","shipLength","getId","placeShip","setPosition","possibleTiles","receiveAttack","coordinate","includes","isSunk","id","Gameboard","name","enemy","createShips","j","placeShips","validPosition","generatePosition","randomRotation","rotate","floor","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","_length","setId","hits","sunk","currentId","_position","setTiles","min","row","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","dom","game","attackTile","e","path","split","console","log","removeEventListener","childNodes","forEach","addEventListener"],"mappings":"2BAAA,MAAMA,EAAS,EAAQ,KAgDvBC,EAAOC,QA9CP,cAAuBF,EACnBG,YAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQD,KAAKE,mBAwBtBC,wBACIH,KAAKC,MAAQD,KAAKI,aAAaJ,KAAKC,OACpCD,KAAKK,mBAAqBL,KAAKC,MAAMK,MAGzCF,aAAaG,GAET,OADAA,EAAMC,MAAK,CAACC,EAAGC,IAAM,GAAMC,KAAKC,WACzBL,EAGXL,mBACI,IAAIK,EAAQ,GACZ,IAAK,IAAIM,EAAI,EAAGA,EAAI,IAAKA,IACrBN,EAAMO,KAAKD,GAEf,OAAON,K,QCZf,SAASQ,EAAeC,EAAMC,GAC1B,GAAID,EAAKE,WACL,IAAK,IAAIC,EAAoB,EAAGA,EAAoBH,EAAKI,OAAQD,IAAqB,CAClF,IAAIE,EAAWC,SAASC,eAAe,GAAGN,KAAcD,EAAKQ,SAAWL,KAC9C,IAAtBA,EACAE,EAASI,UAAUC,IAAI,aAChBP,IAAsBH,EAAKI,OAAS,GAC3CC,EAASI,UAAUC,IAAI,cAE3BL,EAASI,UAAUC,IAAI,kBAG3B,IAAK,IAAIP,EAAoB,EAAGA,EAAoBH,EAAKI,OAAQD,IAAqB,CAClF,IAAIE,EAAWC,SAASC,eAAe,GAAGN,KAAcD,EAAKQ,SAAY,GAAKL,KACpD,IAAtBA,EACAE,EAASI,UAAUC,IAAI,YAChBP,IAAsBH,EAAKI,OAAS,GAC3CC,EAASI,UAAUC,IAAI,eAE3BL,EAASI,UAAUC,IAAI,cAKnC,SAASC,EAAqBC,EAAiBX,GAC3C,IAAKY,UAAUD,EAAgBE,YAAYC,MAAO,CAC9C,IAAIC,EAAYV,SAASC,eAAe,GAAGN,KAAcY,UACzDG,EAAUP,UAAUC,IAAI,cACxBO,EAAaD,IAIrB,SAASE,EAAmBN,EAAiBX,GACzC,IAAKY,UAAUD,EAAgBE,YAAYK,IAAK,CAC5C,IAAIC,EAAUd,SAASC,eAAe,GAAGN,KAAcY,UACvDO,EAAQX,UAAUC,IAAI,YACtBO,EAAaG,IAIrB,SAASH,EAAaI,GAClB,MAAMC,EAAYhB,SAASiB,cAAc,OACzCD,EAAUb,UAAUC,IAAI,SACxBW,EAAKG,UAAY,GACjBH,EAAKI,YAAYH,GAUrB,SAASI,EAAa1B,EAAMC,GACxB,GAAID,EAAKE,WACL,IAAK,IAAIC,EAAoB,EAAGA,EAAoBH,EAAKI,OAAQD,IAAqB,CAClF,IAAIE,EAAWC,SAASC,eAAe,GAAGN,KAAcD,EAAKQ,SAAWL,KAC9C,IAAtBA,EACAE,EAASI,UAAUC,IAAI,aAChBP,IAAsBH,EAAKI,OAAS,GAC3CC,EAASI,UAAUC,IAAI,cAE3BL,EAASI,UAAUkB,OAAO,YAC1BtB,EAASI,UAAUC,IAAI,kBAG3B,IAAK,IAAIP,EAAoB,EAAGA,EAAoBH,EAAKI,OAAQD,IAAqB,CAClF,IAAIE,EAAWC,SAASC,eAAe,GAAGN,KAAcD,EAAKQ,SAAY,GAAKL,KACpD,IAAtBA,EACAE,EAASI,UAAUC,IAAI,YAChBP,IAAsBH,EAAKI,OAAS,GAC3CC,EAASI,UAAUC,IAAI,eAE3BL,EAASI,UAAUkB,OAAO,YAC1BtB,EAASI,UAAUC,IAAI,cAKnC/B,EAAOC,QAAU,CAAEgD,YAhHnB,SAAqBC,GACjB,MAAMC,EAAiBxB,SAASC,eAAesB,GAC/C,IAAK,IAAIhC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIwB,EAAOf,SAASiB,cAAc,OAClCF,EAAKU,aAAa,KAAM,GAAGF,KAAchC,KACzCwB,EAAKZ,UAAUC,IAAI,QACnBoB,EAAeL,YAAYJ,KA0GHW,kBAtGhC,SAA2BpB,EAAiBX,IAY5C,SAAmBW,EAAiBX,GAKhC,IAAKD,QAAQiC,OAAOC,OAAOtB,EAAgBuB,OACvCpC,EAAeC,KAAMC,GAjBzBmC,CAAUxB,EAAiBX,GAC3BU,EAAqBC,EAAiBX,GACtCiB,EAAmBN,EAAiBX,IAmGWoC,iBAhGnD,SAA0BC,EAAgBrC,GACtCU,EAAqB2B,EAAgBrC,GACrCiB,EAAmBoB,EAAgBrC,GA6DvC,SAA2BW,EAAiBX,GACxC,IAAIsC,EAAY3B,EAAgB2B,YAChC,IAAKC,UAAUD,EACXb,EAAad,EAAgBuB,MAAMK,QAASvC,GA/DhDwC,CAAkBH,EAAgBrC,M,cCnBtC,MAAMyC,EAAQ,EAAQ,KAChBC,EAAW,EAAQ,KA0EzBhE,EAAOC,QAxEP,MACIC,YAAY+D,EAAcC,EAASC,EAAcC,GAC7C/D,KAAKgE,QAAUhE,KAAKiE,aAAaL,EAAcC,GAC/C7D,KAAKkE,QAAUlE,KAAKiE,aAAaH,EAAcC,GAC/C/D,KAAKmE,gBACLnE,KAAKoE,WAAY,EACjBpE,KAAKqE,OAAS,KAGlBC,eACI,OAAOtE,KAAKoE,UAGhBG,YACI,OAAOvE,KAAKqE,OAGhBJ,aAAaO,EAAaC,GACtB,GAAoB,UAAhBD,EACA,OAAO,IAAId,EAAMe,GACd,GAAoB,aAAhBD,EACP,OAAO,IAAIb,EAASc,GAEpB,MAAM,IAAIC,MAAM,2DAIxBP,gBACInE,KAAKgE,QAAQW,SAAS3E,KAAKkE,SAC3BlE,KAAKkE,QAAQS,SAAS3E,KAAKgE,SAG/BY,WACQ5E,KAAKgE,mBAAmBN,GAAS1D,KAAKkE,mBAAmBP,GACzD3D,KAAKgE,QAAQa,OACb7E,KAAKkE,QAAQ/D,wBACbH,KAAKkE,QAAQW,OACb7E,KAAK8E,gBACE9E,KAAKgE,mBAAmBL,GAAY3D,KAAKkE,mBAAmBP,GACnE3D,KAAKgE,QAAQ7D,wBACbH,KAAKgE,QAAQa,OACb7E,KAAKkE,QAAQ/D,wBACbH,KAAKkE,QAAQW,OACb7E,KAAK8E,gBACE9E,KAAKgE,mBAAmBN,GAAS1D,KAAKkE,mBAAmBR,IAC5D1D,KAAKgE,QAAQ3D,mBACbL,KAAKgE,QAAQa,OACN7E,KAAKkE,QAAQ7D,qBACpBL,KAAKkE,QAAQW,OACb7E,KAAK8E,iBAKjBA,gBACQ9E,KAAKgE,QAAQe,UAAUC,gBAAkBhF,KAAKkE,QAAQa,UAAUC,kBAChEhF,KAAKoE,WAAY,EACjBpE,KAAKiF,aAIbA,YACQjF,KAAKgE,QAAQe,UAAUC,gBAAkBhF,KAAKkE,QAAQa,UAAUC,eAChEhF,KAAKqE,OAAS,MACPrE,KAAKgE,QAAQe,UAAUC,eAC9BhF,KAAKqE,OAASrE,KAAKkE,QACZlE,KAAKkE,QAAQa,UAAUC,iBAC9BhF,KAAKqE,OAASrE,KAAKgE,Y,cCtE/B,MAAMkB,EAAO,EAAQ,KAgErBvF,EAAOC,QA9DP,MAEIC,cACIG,KAAKmD,MAAQ,GACbnD,KAAKmF,eAAiB,GACtBnF,KAAK8B,YAAc,CAAC,MAAS,GAAI,IAAO,IAG5CsD,QAAQC,GACJ,IAAIrE,EAAO,IAAIkE,EAAKG,GAEpB,OADArF,KAAKmD,MAAMnC,EAAKsE,SAAWtE,EACpBhB,KAAKmD,MAAMnC,EAAKsE,SAG3BC,UAAU/B,EAAQhC,GACd,IAAIvB,EAAQD,KAAKmD,MAAMK,GAAQgC,YAAYhE,GACvCiE,EAAgB,GACpB,IAAK,MAAMpD,KAAQpC,EAAO,CACtB,GAAMoC,KAAQrC,KAAKmF,eAGf,OAAO,EAFPM,EAAcpD,GAAQmB,EAM9B,OADAxD,KAAKmF,eAAiB,IAAKnF,KAAKmF,kBAAmBM,IAC5C,EAGXC,cAAcC,GACV,GAAI3F,KAAK8B,YAAYC,MAAM6D,SAASD,IAAe3F,KAAK8B,YAAYK,IAAIyD,SAASD,GAC7E,OAAO,EAEX,GAAIA,KAAc3F,KAAKmF,eAAgB,CACnC,MAAM3B,EAASxD,KAAKmF,eAAeQ,GAGnC,OAFA3F,KAAKmD,MAAMK,GAAQrB,MACnBnC,KAAK8B,YAAYK,IAAIrB,KAAK6E,IACnB,EAGX,OADA3F,KAAK8B,YAAYC,MAAMjB,KAAK6E,IACrB,EAGXX,eACI,IAAK,MAAMhE,KAAQiC,OAAOC,OAAOlD,KAAKmD,OAClC,IAAKnC,EAAK6E,SACN,OAAO,EAGf,OAAO,EAGXtC,YACI,IAAIA,EAAY,GAChB,IAAK,MAAMvC,KAAQiC,OAAOC,OAAOlD,KAAKmD,OAC9BnC,EAAK6E,UACLtC,EAAUzC,KAAKE,EAAK8E,IAG5B,OAAOvC,K,cC5Df,MAAM7D,EAAS,EAAQ,KAgBvBC,EAAOC,QAdP,cAAoBF,EAChBG,YAAYC,GACRC,MAAMD,GAOVK,sBAAsBwF,GAClB3F,KAAKK,mBAAqBsF,K,cCZlC,MAAMI,EAAY,EAAQ,KAoE1BpG,EAAOC,QAlEP,MACIC,YAAYC,GACRE,KAAKgG,KAAOlG,EACZE,KAAK+E,UAAY,IAAIgB,EACrB/F,KAAKK,mBAAqB,KAC1BL,KAAKiG,MAAQ,KAGjBC,cACI,IAAK,IAAIrF,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIsF,EAAI,EAAGA,EAAI,EAAItF,EAAGsF,IACvBnG,KAAK+E,UAAUK,QAAQvE,GAMnCuF,aACI,IAAK,IAAIpF,KAAQiC,OAAOC,OAAOlD,KAAK+E,UAAU5B,OAAQ,CAClD,IAAIkD,GAAgB,EACpB,MAAQA,GAAe,CACnB,IAAI7E,EAAWxB,KAAKsG,mBACpBtG,KAAKuG,eAAevF,EAAK8E,IACzBO,EAAgBrG,KAAK+E,UAAUQ,UAAUvE,EAAK8E,GAAItE,KAK9D+E,eAAe/C,GACP7C,KAAKC,SAAW,IAChBZ,KAAK+E,UAAU5B,MAAMK,GAAQgD,SAIrCF,mBACI,OAAO3F,KAAK8F,MAAsB,IAAhB9F,KAAKC,UAG3BT,wBAEI,OAAO,KAGXuG,wBACI,OAAO1G,KAAKK,mBAGhBsE,SAASgC,GACL3G,KAAKiG,MAAQU,EAGjBC,WACI,OAAO5G,KAAKiG,MAGhBY,cACI7G,KAAKiG,MAAQ,KAGjBpB,OACI,IAAIc,EAAa3F,KAAK0G,wBACtB1G,KAAKiG,MAAMlB,UAAUW,cAAcC,GACnC3F,KAAKK,mBAAqB,Q,QC/DlC,MAAM6E,EAEF,kBAAoB,EAEpBrF,YAAYiH,GACR,GAAIA,GAAW,GAAK,GAAKA,EACrB,MAAM,IAAIpC,MAAM,uCAEpB1E,KAAK8F,GAAK9F,KAAK+G,QACf/G,KAAKoB,OAAS0F,EACd9G,KAAKgH,KAAO,EACZhH,KAAKiH,MAAO,EACZjH,KAAKkB,YAAa,EAClBlB,KAAKwB,UAAY,EAGrBuF,QAEI,OADA7B,EAAKgC,YACEhC,EAAKgC,UAGhB5B,QACI,OAAOtF,KAAK8F,GAGhB3D,MAEI,OADAnC,KAAKgH,MAAQ,EACNhH,KAGX6F,SACI,OAAI7F,KAAKgH,OAAShH,KAAKoB,QACnBpB,KAAKiH,MAAO,EACLjH,KAAKiH,MAETjH,KAAKiH,KAGhBzB,YAAY2B,GACR,GAAIA,EAAY,GAAKA,EAAY,GAAM,MAAM,IAAIzC,MAAM,sBACvD1E,KAAKwB,SAAW2F,EAChB,IAAIlH,EAAQD,KAAKoH,WAEjB,OADApH,KAAKwB,SAAWb,KAAK0G,OAAOpH,GACrBA,EAGXmH,WACI,IAAInH,EAAQ,GACZ,GAAID,KAAKkB,WAAY,CACjB,MAAMoG,EAAM3G,KAAK8F,MAAMzG,KAAKwB,SAAW,IACvC,IAAIX,EAAI,EACJsF,EAAI,EACR,KAAOtF,EAAIb,KAAKoB,QACRT,KAAK8F,OAAOzG,KAAKwB,SAAWX,GAAK,MAAQyG,EACzCrH,EAAMa,KAAKd,KAAKwB,SAAWX,IAE3BZ,EAAMa,KAAKd,KAAKwB,SAAW2E,GAC3BA,KAEJtF,QAED,CACH,IAAIA,EAAI,EACJsF,EAAI,EACR,KAAOtF,EAAIb,KAAKoB,QACRpB,KAAKwB,SAAgB,GAAJX,EAAU,IAC3BZ,EAAMa,KAAKd,KAAKwB,SAAgB,GAAJX,IAE5BZ,EAAMa,KAAKd,KAAKwB,SAAgB,GAAJ2E,GAC5BA,KAEJtF,IAGR,OAAOZ,EAGXuG,SACIxG,KAAKkB,YAAclB,KAAKkB,WACxBlB,KAAKoH,YAKbzH,EAAOC,QAAUsF,ICpFbqC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa9H,QAGrB,IAAID,EAAS4H,EAAyBE,GAAY,CAGjD7H,QAAS,IAOV,OAHAgI,EAAoBH,GAAU9H,EAAQA,EAAOC,QAAS4H,GAG/C7H,EAAOC,Q,MCrBf,MAAMiI,EAAO,EAAQ,KACfC,EAAM,EAAQ,KAEdC,EAAO,IAAIF,EAAK,QAAS,OAAQ,WAAY,QAkBnD,SAASG,EAAWC,GAChB,IAAIpG,EAASoG,EAAEC,KAAK,GAAGpC,GAAGqC,MAAM,KAAK,GACrCJ,EAAK/D,QAAQ7D,sBAAsB0B,GAMnCkG,EAAKnD,WACLkD,EAAI9E,kBAAkB+E,EAAK/D,QAAQe,UAAW,WAC9C+C,EAAIzE,iBAAiB0E,EAAK7D,QAAQa,UAAW,gBACzCgD,EAAKzD,gBACL8D,QAAQC,IAAIN,EAAK1D,OAAO2B,MAR5BhG,KAAKsI,oBAAoB,QAASN,GApBtCD,EAAK/D,QAAQkC,cACb6B,EAAK/D,QAAQoC,aACb2B,EAAK7D,QAAQgC,cACb6B,EAAK7D,QAAQkC,aAEbgC,QAAQC,IAAIN,GAEZD,EAAIlF,YAAY,WAChBkF,EAAIlF,YAAY,gBAEKtB,SAASC,eAAe,gBAAgBgH,WAEhDC,SAAQnG,IACjBA,EAAKoG,iBAAiB,QAAST,O","file":"main.js","sourcesContent":["const Player = require('./player')\n\nclass Computer extends Player {\n    constructor(_name) {\n        super(_name)\n        this.tiles = this.makeArrayOfTiles()\n    }\n\n    // placeShips() {\n    //     for (let ship of Object.values(this.gameboard.ships)) {\n    //         let validPosition = false\n    //         while (!validPosition) {\n    //             let position = this.generatePosition()\n    //             this.randomRotation(ship.id)\n    //             validPosition = this.gameboard.placeShip(ship.id, position)\n    //         }\n    //     }\n    // }\n\n    // randomRotation(shipId) {\n    //     if (Math.random() < 0.5) {\n    //         this.gameboard.ships[shipId].rotate()\n    //     }\n    // }\n    //\n    // generatePosition() {\n    //     return Math.floor(Math.random() * 100)\n    // }\n\n    setNextOutgoingAttack() {\n        this.tiles = this.shuffleArray(this.tiles)\n        this.nextOutgoingAttack = this.tiles.pop()\n    }\n\n    shuffleArray(array) {\n        array.sort((a, b) => 0.5 - Math.random())\n        return array\n    }\n\n    makeArrayOfTiles() {\n        let array = []\n        for (let i = 0; i < 100; i++) {\n            array.push(i)\n        }\n        return array\n    }\n}\n\nmodule.exports = Computer\n","function createBoard(DOMboardId) {\n    const boardContainer = document.getElementById(DOMboardId);\n    for (let i = 0; i < 100; i++) {\n        let tile = document.createElement('div')\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\n        tile.classList.add('tile')\n        boardContainer.appendChild(tile)\n    }\n}\n\nfunction renderPlayerBoard(playerGameboard, DOMBoardId) {\n    showShips(playerGameboard, DOMBoardId)\n    showShotedWaterTiles(playerGameboard, DOMBoardId)\n    showShotedHitTiles(playerGameboard, DOMBoardId)\n}\n\nfunction renderEnemyBoard(enemyGameboard, DOMBoardId) {\n    showShotedWaterTiles(enemyGameboard, DOMBoardId)\n    showShotedHitTiles(enemyGameboard, DOMBoardId)\n    showSunkShipTiles(enemyGameboard, DOMBoardId)\n}\n\nfunction showShips(playerGameboard, DOMBoardId) {\n    // for (tileId of Object.keys(playerGameboard.tilesWithShips)) {\n    //     let tileWithShip = document.getElementById(`${DOMBoardId}-${tileId}`)\n    //     tileWithShip.classList.add('tile-ship')\n    // }\n    for (ship of Object.values(playerGameboard.ships)) {\n        showPlayerShip(ship, DOMBoardId)\n    }\n}\n\nfunction showPlayerShip(ship, DOMBoardId) {\n    if (ship.horizontal) {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-left')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-right')\n            }\n            shipTile.classList.add('tile-ship')\n        }\n    } else {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-top')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-bottom')\n            }\n            shipTile.classList.add('tile-ship')\n        }\n    }\n}\n\nfunction showShotedWaterTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.tilesShoted.water) {\n        let tileWater = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileWater.classList.add('tile-water')\n        addHitMarker(tileWater)\n    }\n}\n\nfunction showShotedHitTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.tilesShoted.hit) {\n        let tileHit = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileHit.classList.add('tile-hit')\n        addHitMarker(tileHit)\n    }\n}\n\nfunction addHitMarker(tile) {\n    const hitMarker = document.createElement('div')\n    hitMarker.classList.add('shoot')\n    tile.innerHTML = ''\n    tile.appendChild(hitMarker)\n}\n\nfunction showSunkShipTiles(playerGameboard, DOMBoardId) {\n    let sunkShips = playerGameboard.sunkShips()\n    for (shipId of sunkShips) {\n        showSunkShip(playerGameboard.ships[shipId], DOMBoardId)\n    }\n}\n\nfunction showSunkShip(ship, DOMBoardId) {\n    if (ship.horizontal) {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-left')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-right')\n            }\n            shipTile.classList.remove('tile-hit')\n            shipTile.classList.add('tile-sunk')\n        }\n    } else {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-top')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-bottom')\n            }\n            shipTile.classList.remove('tile-hit')\n            shipTile.classList.add('tile-sunk')\n        }\n    }\n}\n\nmodule.exports = { createBoard, renderPlayerBoard, renderEnemyBoard }\n","const Human = require('./humanPlayer')\nconst Computer = require('./computerPlayer')\n\nclass Game {\n    constructor(_player1Type, _p1name, _player2Type, _p2name) {\n        this.player1 = this.createPlayer(_player1Type, _p1name)\n        this.player2 = this.createPlayer(_player2Type, _p2name)\n        this.relatePlayers()\n        this.gameEnded = false\n        this.winner = null\n    }\n\n    getGameEnded() {\n        return this.gameEnded\n    }\n\n    getWinner() {\n        return this.winner\n    }\n\n    createPlayer(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            return new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            return new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    relatePlayers() {\n        this.player1.setEnemy(this.player2)\n        this.player2.setEnemy(this.player1)\n    }\n\n    gameTurn() {\n        if (this.player1 instanceof Human && this.player2 instanceof Computer) {\n            this.player1.play()\n            this.player2.setNextOutgoingAttack()\n            this.player2.play()\n            this.checkEndGame()\n        } else if (this.player1 instanceof Computer && this.player2 instanceof Computer) {\n            this.player1.setNextOutgoingAttack()\n            this.player1.play()\n            this.player2.setNextOutgoingAttack()\n            this.player2.play()\n            this.checkEndGame()\n        } else if (this.player1 instanceof Human && this.player2 instanceof Human) {\n            if (this.player1.nextOutgoingAttack) {\n                this.player1.play()\n            } else if (this.player2.nextOutgoingAttack) {\n                this.player2.play()\n                this.checkEndGame()\n            }\n        }\n    }\n\n    checkEndGame() {\n        if (this.player1.gameboard.allShipsSank() || this.player2.gameboard.allShipsSank()) {\n            this.gameEnded = true\n            this.setWinner()\n        }\n    }\n\n    setWinner() {\n        if (this.player1.gameboard.allShipsSank() && this.player2.gameboard.allShipsSank()) {\n            this.winner = 'tie'\n        } else if (this.player1.gameboard.allShipsSank()) {\n            this.winner = this.player2\n        } else if (this.player2.gameboard.allShipsSank()) {\n            this.winner = this.player1\n        }\n    }\n}\n\nmodule.exports = Game\n","const Ship = require('./ship');\n\nclass Gameboard {\n\n    constructor() {\n        this.ships = {}\n        this.tilesWithShips = {}\n        this.tilesShoted = {'water': [], 'hit': []}\n    }\n\n    addShip(shipLength) {\n        let ship = new Ship(shipLength)\n        this.ships[ship.getId()] = ship\n        return this.ships[ship.getId()]\n    }\n\n    placeShip(shipId, position) {\n        let tiles = this.ships[shipId].setPosition(position)\n        let possibleTiles = {}\n        for (const tile of tiles) {\n            if (!(tile in this.tilesWithShips)) {\n                possibleTiles[tile] = shipId\n            } else {\n                return false\n            }\n        }\n        this.tilesWithShips = { ...this.tilesWithShips, ...possibleTiles }\n        return true\n    }\n\n    receiveAttack(coordinate) {\n        if (this.tilesShoted.water.includes(coordinate) || this.tilesShoted.hit.includes(coordinate)) {\n            return false\n        }\n        if (coordinate in this.tilesWithShips) {\n            const shipId = this.tilesWithShips[coordinate]\n            this.ships[shipId].hit()\n            this.tilesShoted.hit.push(coordinate)\n            return true\n        }\n        this.tilesShoted.water.push(coordinate)\n        return true\n    }\n\n    allShipsSank() {\n        for (const ship of Object.values(this.ships)) {\n            if (!ship.isSunk()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    sunkShips() {\n        let sunkShips = []\n        for (const ship of Object.values(this.ships)) {\n            if (ship.isSunk()) {\n                sunkShips.push(ship.id)\n            }\n        }\n        return sunkShips\n    }\n}\n\nmodule.exports = Gameboard\n","const Player = require('./player')\n\nclass Human extends Player {\n    constructor(_name) {\n        super(_name)\n    }\n\n    // placeShips() {\n    //     return null\n    // }\n\n    setNextOutgoingAttack(coordinate) {\n        this.nextOutgoingAttack = coordinate\n    }\n}\n\nmodule.exports = Human\n","const Gameboard = require('./gameboard')\n\nclass Player {\n    constructor(_name) {\n        this.name = _name\n        this.gameboard = new Gameboard()\n        this.nextOutgoingAttack = null\n        this.enemy = null\n    }\n\n    createShips() {\n        for (let i = 2; i < 6; i++) {\n            for (let j = 1; j < 7 - i; j++) {\n                this.gameboard.addShip(i)\n            }\n        }\n    }\n\n    // TODO: Delete placeShips, randomRotation and generatePosition from player and uncomment it in ComputerPlayer when Human player ship placement done\n    placeShips() {\n        for (let ship of Object.values(this.gameboard.ships)) {\n            let validPosition = false\n            while (!validPosition) {\n                let position = this.generatePosition()\n                this.randomRotation(ship.id)\n                validPosition = this.gameboard.placeShip(ship.id, position)\n            }\n        }\n    }\n\n    randomRotation(shipId) {\n        if (Math.random() < 0.5) {\n            this.gameboard.ships[shipId].rotate()\n        }\n    }\n\n    generatePosition() {\n        return Math.floor(Math.random() * 100)\n    }\n\n    setNextOutgoingAttack() {\n        // setea el proximo ataque, este va a variar en humanos y computadora\n        return null\n    }\n\n    getNextOutgoingAttack() {\n        return this.nextOutgoingAttack\n    }\n\n    setEnemy(_enemy) {\n        this.enemy = _enemy\n    }\n\n    getEnemy() {\n        return this.enemy\n    }\n\n    deleteEnemy() {\n        this.enemy = null\n    }\n\n    play() {\n        let coordinate = this.getNextOutgoingAttack()\n        this.enemy.gameboard.receiveAttack(coordinate)\n        this.nextOutgoingAttack = null\n    }\n}\n\nmodule.exports = Player\n","\nclass Ship {\n\n    static currentId = -1\n\n    constructor(_length) {\n        if (_length <= 0 || 6 <= _length) {\n            throw new Error('Ship length must be between 1 and 5')\n        }\n        this.id = this.setId()\n        this.length = _length\n        this.hits = 0\n        this.sunk = false\n        this.horizontal = true\n        this.position = -1\n    }\n\n    setId() {\n        Ship.currentId++\n        return Ship.currentId\n    }\n\n    getId() {\n        return this.id\n    }\n\n    hit() {\n        this.hits += 1\n        return this\n    }\n\n    isSunk() {\n        if (this.hits === this.length) {\n            this.sunk = true\n            return this.sunk\n        }\n        return this.sunk\n    }\n\n    setPosition(_position) {\n        if (_position < 0 || _position > 99) { throw new Error('position not valid') }\n        this.position = _position\n        let tiles = this.setTiles()\n        this.position = Math.min(...tiles)\n        return tiles\n    }\n\n    setTiles() {\n        let tiles = []\n        if (this.horizontal) {\n            const row = Math.floor(this.position / 10)\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (Math.floor((this.position + i) / 10) === row) {\n                    tiles.push(this.position + i)\n                } else {\n                    tiles.push(this.position - j)\n                    j++\n                }\n                i++\n            }\n        } else {\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (this.position + (i * 10) < 100) {\n                    tiles.push(this.position + (i * 10))\n                } else {\n                    tiles.push(this.position - (j * 10))\n                    j++\n                }\n                i++\n            }\n        }\n        return tiles\n    }\n\n    rotate() {\n        this.horizontal = !this.horizontal\n        this.setTiles()\n    }\n\n}\n\nmodule.exports = Ship\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\nconst dom = require('./domManipulation')\n\nconst game = new Game('human', 'tony', 'computer', 'cpu2')\n\ngame.player1.createShips()\ngame.player1.placeShips()\ngame.player2.createShips()\ngame.player2.placeShips()\n\nconsole.log(game)\n\ndom.createBoard('P1Board')\ndom.createBoard('P1enemyBoard')\n\nconst P1enemyBoard = document.getElementById('P1enemyBoard').childNodes\n\nP1enemyBoard.forEach(tile => {\n    tile.addEventListener('click', attackTile)\n})\n\nfunction attackTile(e) {\n    let tileId = e.path[0].id.split('-')[1]\n    game.player1.setNextOutgoingAttack(tileId)\n    gameLoop()\n    this.removeEventListener('click', attackTile)\n}\n\nfunction gameLoop() {\n    game.gameTurn()\n    dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n    dom.renderEnemyBoard(game.player2.gameboard, 'P1enemyBoard')\n    if (game.getGameEnded()) {\n        console.log(game.winner.name)\n    }\n}\n"],"sourceRoot":""}