{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domManipulation.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","tiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","placeShip","shipId","Math","random","rotate","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","showPlayerShip","DOMBoardId","horizontal","shipPositionDelta","length","shipTile","document","getElementById","classList","add","setAttribute","getId","showShotedWaterTiles","playerGameboard","tileId","tilesShoted","water","tileWater","addHitMarker","showShotedHitTiles","hit","tileHit","remove","tile","hitMarker","createElement","innerHTML","appendChild","showSunkShipTiles","sunkShips","showSunkShip","createBoard","DOMboardId","boardContainer","renderPlayerBoard","childNodes","forEach","clearBoard","console","log","showShips","renderEnemyBoard","enemyGameboard","Human","Computer","_player1Type","_p1name","_player2Type","_p2name","player1","createPlayer","player2","relatePlayers","gameEnded","winner","getGameEnded","getWinner","_playerType","_playerName","Error","setEnemy","gameTurn","play","checkEndGame","allShipsSank","setWinner","Ship","tilesWithShips","addShip","shipLength","removeShip","setPosition","possibleTiles","rotateShip","toggleOrientation","cleanOldShipTiles","keys","receiveAttack","coordinate","includes","isSunk","Gameboard","name","enemy","createShips","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","_length","setId","hits","sunk","currentId","_position","setTiles","min","row","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","dom","game","P1enemyBoardTiles","attackTile","e","path","split","removeEventListener","playerBoard","draggingElement","addEventListener","P1BoardTiles","dropHandle","preventDefault","target","contains","parseInt","dataTransfer","getData","parentNode","removeChild","shipTiles","querySelectorAll","allowShipRotations","getAttribute","dragStarted","style","opacity","setData","childElementCount","dragEnded","dragOnBoard","dragOffBoard","dragOnTile","dragOffTile","outOfBoardShips","getElementsByClassName","initShipPlacement"],"mappings":"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","file":"main.js","sourcesContent":["const Player = require('./player')\n\nclass Computer extends Player {\n    constructor(_name) {\n        super(_name)\n        this.tiles = this.makeArrayOfTiles()\n    }\n\n    placeShips() {\n        for (let ship of Object.values(this.gameboard.ships)) {\n            let validPosition = false\n            while (!validPosition) {\n                let position = this.generatePosition()\n                this.randomRotation(ship.id)\n                validPosition = this.gameboard.placeShip(ship.id, position)\n            }\n        }\n    }\n\n    randomRotation(shipId) {\n        if (Math.random() < 0.5) {\n            this.gameboard.ships[shipId].rotate()\n        }\n    }\n\n    generatePosition() {\n        return Math.floor(Math.random() * 100)\n    }\n\n    setNextOutgoingAttack() {\n        this.tiles = this.shuffleArray(this.tiles)\n        this.nextOutgoingAttack = this.tiles.pop()\n    }\n\n    shuffleArray(array) {\n        array.sort((a, b) => 0.5 - Math.random())\n        return array\n    }\n\n    makeArrayOfTiles() {\n        let array = []\n        for (let i = 0; i < 100; i++) {\n            array.push(i)\n        }\n        return array\n    }\n}\n\nmodule.exports = Computer\n","\nfunction createBoard(DOMboardId) {\n    const boardContainer = document.getElementById(DOMboardId);\n    for (let i = 0; i < 100; i++) {\n        let tile = document.createElement('div')\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\n        tile.classList.add('tile')\n        boardContainer.appendChild(tile)\n    }\n}\n\nfunction renderPlayerBoard(playerGameboard, DOMBoardId) {\n    clearBoard(playerGameboard, DOMBoardId)\n    showShips(playerGameboard, DOMBoardId)\n    showShotedWaterTiles(playerGameboard, DOMBoardId)\n    showShotedHitTiles(playerGameboard, DOMBoardId)\n    showSunkShipTiles(playerGameboard, DOMBoardId)\n}\n\nfunction renderEnemyBoard(enemyGameboard, DOMBoardId) {\n    showShotedWaterTiles(enemyGameboard, DOMBoardId)\n    showShotedHitTiles(enemyGameboard, DOMBoardId)\n    showSunkShipTiles(enemyGameboard, DOMBoardId)\n}\n\nfunction clearBoard(playerGameboard, DOMBoardId) {\n    let tiles = document.getElementById(DOMBoardId).childNodes\n    tiles.forEach( tile => {\n        tile.classList = ''\n        tile.classList.add('tile')\n    })\n}\n\nfunction showShips(playerGameboard, DOMBoardId) {\n    for (ship of Object.values(playerGameboard.ships)) {\n        console.log(ship)\n        showPlayerShip(ship, DOMBoardId)\n    }\n}\n\nfunction showPlayerShip(ship, DOMBoardId) {\n    if (ship.horizontal) {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-left')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-right')\n            }\n            shipTile.classList.add('tile-ship')\n            shipTile.classList.add('no-drop')\n            shipTile.setAttribute('data-ship-id', ship.getId())\n        }\n    } else {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-top')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-bottom')\n            }\n            shipTile.classList.add('tile-ship')\n            shipTile.classList.add('no-drop')\n            shipTile.setAttribute('data-ship-id', ship.getId())\n        }\n    }\n}\n\nfunction showShotedWaterTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.tilesShoted.water) {\n        let tileWater = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileWater.classList.add('tile-water')\n        addHitMarker(tileWater)\n    }\n}\n\nfunction showShotedHitTiles(playerGameboard, DOMBoardId) {\n    for (tileId of playerGameboard.tilesShoted.hit) {\n        let tileHit = document.getElementById(`${DOMBoardId}-${tileId}`)\n        tileHit.classList.remove('tile-ship')\n        tileHit.classList.add('tile-hit')\n        addHitMarker(tileHit)\n    }\n}\n\nfunction addHitMarker(tile) {\n    const hitMarker = document.createElement('div')\n    hitMarker.classList.add('shoot')\n    tile.innerHTML = ''\n    tile.appendChild(hitMarker)\n}\n\nfunction showSunkShipTiles(playerGameboard, DOMBoardId) {\n    let sunkShips = playerGameboard.sunkShips()\n    for (shipId of sunkShips) {\n        showSunkShip(playerGameboard.ships[shipId], DOMBoardId)\n    }\n}\n\nfunction showSunkShip(ship, DOMBoardId) {\n    if (ship.horizontal) {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + shipPositionDelta}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-left')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-right')\n            }\n            shipTile.classList.remove('tile-hit')\n            shipTile.classList.add('tile-sunk')\n        }\n    } else {\n        for (let shipPositionDelta = 0; shipPositionDelta < ship.length; shipPositionDelta++) {\n            let shipTile = document.getElementById(`${DOMBoardId}-${ship.position + (10 * shipPositionDelta)}`)\n            if (shipPositionDelta === 0) {\n                shipTile.classList.add('ship-top')\n            } else if (shipPositionDelta === ship.length - 1) {\n                shipTile.classList.add('ship-bottom')\n            }\n            shipTile.classList.remove('tile-hit')\n            shipTile.classList.add('tile-sunk')\n        }\n    }\n}\n\nmodule.exports = { createBoard, renderPlayerBoard, renderEnemyBoard }\n","const Human = require('./humanPlayer')\nconst Computer = require('./computerPlayer')\n\nclass Game {\n    constructor(_player1Type, _p1name, _player2Type, _p2name) {\n        this.player1 = this.createPlayer(_player1Type, _p1name)\n        this.player2 = this.createPlayer(_player2Type, _p2name)\n        this.relatePlayers()\n        this.gameEnded = false\n        this.winner = null\n    }\n\n    getGameEnded() {\n        return this.gameEnded\n    }\n\n    getWinner() {\n        return this.winner\n    }\n\n    createPlayer(_playerType, _playerName) {\n        if (_playerType === 'human') {\n            return new Human(_playerName)\n        } else if (_playerType === 'computer') {\n            return new Computer(_playerName)\n        } else {\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\n        }\n    }\n\n    relatePlayers() {\n        this.player1.setEnemy(this.player2)\n        this.player2.setEnemy(this.player1)\n    }\n\n    gameTurn() {\n        if (this.player1 instanceof Human && this.player2 instanceof Computer) {\n            this.player1.play()\n            this.player2.setNextOutgoingAttack()\n            this.player2.play()\n            this.checkEndGame()\n        } else if (this.player1 instanceof Computer && this.player2 instanceof Computer) {\n            this.player1.setNextOutgoingAttack()\n            this.player1.play()\n            this.player2.setNextOutgoingAttack()\n            this.player2.play()\n            this.checkEndGame()\n        } else if (this.player1 instanceof Human && this.player2 instanceof Human) {\n            if (this.player1.nextOutgoingAttack) {\n                this.player1.play()\n            } else if (this.player2.nextOutgoingAttack) {\n                this.player2.play()\n                this.checkEndGame()\n            }\n        }\n    }\n\n    checkEndGame() {\n        if (this.player1.gameboard.allShipsSank() || this.player2.gameboard.allShipsSank()) {\n            this.gameEnded = true\n            this.setWinner()\n        }\n    }\n\n    setWinner() {\n        if (this.player1.gameboard.allShipsSank() && this.player2.gameboard.allShipsSank()) {\n            this.winner = 'tie'\n        } else if (this.player1.gameboard.allShipsSank()) {\n            this.winner = this.player2\n        } else if (this.player2.gameboard.allShipsSank()) {\n            this.winner = this.player1\n        }\n    }\n}\n\nmodule.exports = Game\n","const Ship = require('./ship');\n\nclass Gameboard {\n\n    constructor() {\n        this.ships = {}\n        this.tilesWithShips = {}\n        this.tilesShoted = {'water': [], 'hit': []}\n    }\n\n    addShip(shipLength) {\n        let ship = new Ship(shipLength)\n        this.ships[ship.getId()] = ship\n        return this.ships[ship.getId()]\n    }\n\n    removeShip(shipId) {\n        delete this.ships[shipId]\n    }\n\n    placeShip(shipId, position) {\n        let tiles = this.ships[shipId].setPosition(position)\n        let possibleTiles = {}\n        for (const tile of tiles) {\n            if (!(tile in this.tilesWithShips)) {\n                possibleTiles[tile] = shipId\n            } else {\n                return false\n            }\n        }\n        this.tilesWithShips = { ...this.tilesWithShips, ...possibleTiles }\n        return true\n    }\n\n    rotateShip(shipId) {\n        let tiles = this.ships[shipId].rotate()\n        // this.cleanOldShipTiles(shipId)\n        let possibleTiles = {}\n        for (const tile of tiles) {\n            if (tile < 99 || this.tilesWithShips[tile] === shipId || (!(tile in this.tilesWithShips))) {\n                possibleTiles[tile] = shipId\n            } else {\n                console.log('false')\n                this.ships[shipId].toggleOrientation()\n                return false\n            }\n        }\n        this.cleanOldShipTiles(shipId)\n        this.tilesWithShips = { ...this.tilesWithShips, ...possibleTiles }\n        console.log(this.tilesWithShips)\n        return true\n    }\n\n    cleanOldShipTiles(shipId) {\n        console.log(this.tilesWithShips)\n        for (let tile of Object.keys(this.tilesWithShips)) {\n            if (this.tilesWithShips[tile] === shipId) {\n                delete this.tilesWithShips[tile]\n            }\n        }\n    }\n\n    receiveAttack(coordinate) {\n        if (this.tilesShoted.water.includes(coordinate) || this.tilesShoted.hit.includes(coordinate)) {\n            return false\n        }\n        if (coordinate in this.tilesWithShips) {\n            const shipId = this.tilesWithShips[coordinate]\n            this.ships[shipId].hit()\n            this.tilesShoted.hit.push(coordinate)\n            return true\n        }\n        this.tilesShoted.water.push(coordinate)\n        return true\n    }\n\n    allShipsSank() {\n        for (const ship of Object.values(this.ships)) {\n            if (!ship.isSunk()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    sunkShips() {\n        let sunkShips = []\n        for (const ship of Object.values(this.ships)) {\n            if (ship.isSunk()) {\n                sunkShips.push(ship.id)\n            }\n        }\n        return sunkShips\n    }\n}\n\nmodule.exports = Gameboard\n","const Player = require('./player')\n\nclass Human extends Player {\n    constructor(_name) {\n        super(_name)\n    }\n\n    // placeShips() {\n    //     return null\n    // }\n\n    setNextOutgoingAttack(coordinate) {\n        this.nextOutgoingAttack = coordinate\n    }\n}\n\nmodule.exports = Human\n","const Gameboard = require('./gameboard')\n\nclass Player {\n    constructor(_name) {\n        this.name = _name\n        this.gameboard = new Gameboard()\n        this.nextOutgoingAttack = null\n        this.enemy = null\n    }\n\n    createShips() {\n        for (let i = 2; i < 6; i++) {\n            for (let j = 1; j < 7 - i; j++) {\n                this.gameboard.addShip(i)\n            }\n        }\n    }\n\n    // TODO: Delete placeShips, randomRotation and generatePosition methods from Player and uncomment it in\n    //  ComputerPlayer when Human player ship placement done\n    // placeShips() {\n    //     for (let ship of Object.values(this.gameboard.ships)) {\n    //         let validPosition = false\n    //         while (!validPosition) {\n    //             let position = this.generatePosition()\n    //             this.randomRotation(ship.id)\n    //             validPosition = this.gameboard.placeShip(ship.id, position)\n    //         }\n    //     }\n    // }\n    //\n    // randomRotation(shipId) {\n    //     if (Math.random() < 0.5) {\n    //         this.gameboard.ships[shipId].rotate()\n    //     }\n    // }\n    //\n    // generatePosition() {\n    //     return Math.floor(Math.random() * 100)\n    // }\n\n    setNextOutgoingAttack() {\n        // setea el proximo ataque, este va a variar en humanos y computadora\n        return null\n    }\n\n    getNextOutgoingAttack() {\n        return this.nextOutgoingAttack\n    }\n\n    setEnemy(_enemy) {\n        this.enemy = _enemy\n    }\n\n    getEnemy() {\n        return this.enemy\n    }\n\n    deleteEnemy() {\n        this.enemy = null\n    }\n\n    play() {\n        let coordinate = this.getNextOutgoingAttack()\n        this.enemy.gameboard.receiveAttack(coordinate)\n        this.nextOutgoingAttack = null\n    }\n}\n\nmodule.exports = Player\n","\nclass Ship {\n\n    static currentId = -1\n\n    constructor(_length) {\n        if (_length <= 0 || 6 <= _length) {\n            throw new Error('Ship length must be between 1 and 5')\n        }\n        this.id = this.setId()\n        this.length = _length\n        this.hits = 0\n        this.sunk = false\n        this.horizontal = true\n        this.position = -1\n    }\n\n    setId() {\n        Ship.currentId++\n        return Ship.currentId\n    }\n\n    getId() {\n        return this.id\n    }\n\n    hit() {\n        this.hits += 1\n        return this\n    }\n\n    isSunk() {\n        if (this.hits === this.length) {\n            this.sunk = true\n            return this.sunk\n        }\n        return this.sunk\n    }\n\n    setPosition(_position) {\n        if (_position < 0 || _position > 99) { throw new Error('position not valid') }\n        this.position = _position\n        let tiles = this.setTiles()\n        this.position = Math.min(...tiles)\n        return tiles\n    }\n\n    setTiles() {\n        let tiles = []\n        if (this.horizontal) {\n            const row = Math.floor(this.position / 10)\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (Math.floor((this.position + i) / 10) === row) {\n                    tiles.push(this.position + i)\n                } else {\n                    tiles.push(this.position - j)\n                    j++\n                }\n                i++\n            }\n        } else {\n            let i = 0\n            let j = 1\n            while (i < this.length) {\n                if (this.position + (i * 10) < 100) {\n                    tiles.push(this.position + (i * 10))\n                } else {\n                    tiles.push(this.position - (j * 10))\n                    j++\n                }\n                i++\n            }\n        }\n        return tiles\n    }\n\n    rotate() {\n        this.horizontal = !this.horizontal\n        return this.setTiles()\n    }\n\n    toggleOrientation() {\n        this.horizontal = !this.horizontal\n    }\n\n}\n\nmodule.exports = Ship\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\nconst dom = require('./domManipulation')\n\nconst game = new Game('human', 'tony', 'computer', 'cpu2')\n\n// game.player1.createShips()\n// game.player1.placeShips()\ngame.player2.createShips()\ngame.player2.placeShips()\n\ndom.createBoard('P1Board')\ndom.createBoard('P1enemyBoard')\n\ndom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n\nconst P1enemyBoardTiles = document.getElementById('P1enemyBoard').childNodes\n\nP1enemyBoardTiles.forEach(tile => {\n    tile.addEventListener('click', attackTile)\n})\n\nfunction attackTile(e) {\n    let tileId = e.path[0].id.split('-')[1]\n    game.player1.setNextOutgoingAttack(tileId)\n    gameLoop()\n    this.removeEventListener('click', attackTile)\n}\n\nfunction gameLoop() {\n    game.gameTurn()\n    dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n    dom.renderEnemyBoard(game.player2.gameboard, 'P1enemyBoard')\n    if (game.getGameEnded()) {\n        P1enemyBoardTiles.forEach(tile => {\n            tile.removeEventListener('click', attackTile)\n        })\n    }\n}\n\n// Drag And Drop Ships\n\nlet playerBoard\nlet draggingElement\nconst P1BoardTiles = document.getElementById('P1Board').childNodes\n\nfunction initShipPlacement() {\n    playerBoard = document.getElementById('P1Board')\n    playerBoard.addEventListener('dragover', dragOnBoard, false)\n    playerBoard.addEventListener('dragleave', dragOffBoard, false)\n    playerBoard.addEventListener('drop', dropHandle, false)\n\n    P1BoardTiles.forEach(tile => tile.addEventListener('dragover', dragOnTile, false))\n    P1BoardTiles.forEach(tile => tile.addEventListener('dragleave', dragOffTile, false))\n\n    const outOfBoardShips = document.getElementsByClassName('out-of-board-ship')\n    for (let ship of outOfBoardShips) {\n        ship.addEventListener('dragstart', dragStarted, false)\n        ship.addEventListener('dragend', dragEnded, false)\n    }\n}\n\nfunction dropHandle(e) {\n    e.preventDefault()\n    if (!e.target.classList.contains('no-drop')) {\n        let position = parseInt(e.target.id.split('-')[1])\n        let shipLength = e.dataTransfer.getData('shipLength')\n        let ship = game.player1.gameboard.addShip(shipLength)\n        let valid = game.player1.gameboard.placeShip(ship.getId(), position)\n        if (valid) {\n            draggingElement.parentNode.removeChild(draggingElement)\n\n        } else {\n            delete game.player1.gameboard.removeShip(ship.getId())\n        }\n    }\n    this.classList.remove('over')\n    e.target.classList.remove('over-tile')\n    dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n    allowShipRotations()\n}\n\nfunction allowShipRotations() {\n    let shipTiles = playerBoard.querySelectorAll('.tile-ship')\n    console.log(shipTiles)\n    shipTiles.forEach(tile => tile.addEventListener('click', rotateShip, false))\n}\n\nfunction rotateShip(e) {\n    let shipId = parseInt(e.target.getAttribute('data-ship-id'))\n    game.player1.gameboard.rotateShip(shipId)\n    dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\n    console.log(game.player1.gameboard)\n}\n\nfunction dragStarted(e) {\n    draggingElement = this\n    this.style.opacity = '0.4'\n    e.dataTransfer.setData('shipLength', e.target.childElementCount)\n}\n\nfunction dragEnded(e) {\n    this.style.opacity = '1'\n}\n\nfunction dragOnBoard(e) {\n    e.preventDefault()\n    this.classList.add('over')\n    return false\n}\n\nfunction dragOffBoard(e) {\n    e.preventDefault()\n    this.classList.remove('over')\n    return false\n}\n\nfunction dragOnTile(e) {\n    this.classList.add('over-tile')\n}\n\nfunction dragOffTile(e) {\n    this.classList.remove('over-tile')\n}\n\ninitShipPlacement()\n"],"sourceRoot":""}