{"version":3,"sources":["webpack://battleship/./src/computerPlayer.js","webpack://battleship/./src/domManipulation.js","webpack://battleship/./src/game.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/humanPlayer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"names":["Player","module","exports","constructor","_name","super","this","tiles","makeArrayOfTiles","placeShips","ship","Object","values","gameboard","ships","validPosition","position","generatePosition","randomRotation","id","placeShip","shipId","Math","random","rotate","floor","setNextOutgoingAttack","shuffleArray","nextOutgoingAttack","pop","array","sort","a","b","i","push","showShotedWaterTiles","playerGameboard","DOMBoardId","tileId","tilesShoted","water","document","getElementById","classList","add","showShotedHitTiles","hit","createBoard","DOMboardId","boardContainer","tile","createElement","setAttribute","appendChild","renderPlayerBoard","keys","tilesWithShips","showShips","renderEnemyBoard","enemyGameboard","Human","Computer","_player1Type","_p1name","_player2Type","_p2name","player1","createPlayer","player2","relatePlayers","_playerType","_playerName","Error","setEnemy","Ship","addShip","shipLenght","getId","setPosition","possibleTiles","receiveAttack","coordinate","includes","allShipsSank","isSunk","Gameboard","name","enemy","createShips","j","getNextOutgoingAttack","_enemy","getEnemy","deleteEnemy","play","_length","setId","length","hits","sunk","horizontal","currentId","_position","setTiles","row","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Game","dom","attackTile","e","path","split","game","console","log","removeEventListener","childNodes","forEach","addEventListener"],"mappings":"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","file":"main.js","sourcesContent":["const Player = require('./player')\r\n\r\nclass Computer extends Player {\r\n    constructor(_name) {\r\n        super(_name)\r\n        this.tiles = this.makeArrayOfTiles()\r\n    }\r\n\r\n    placeShips() {\r\n        for (let ship of Object.values(this.gameboard.ships)) {\r\n            let validPosition = false\r\n            while (!validPosition) {\r\n                let position = this.generatePosition()\r\n                this.randomRotation(ship.id)\r\n                validPosition = this.gameboard.placeShip(ship.id, position)\r\n            }\r\n        }\r\n    }\r\n\r\n    randomRotation(shipId) {\r\n        if (Math.random() < 0.5) {\r\n            this.gameboard.ships[shipId].rotate()\r\n        }\r\n    }\r\n\r\n    generatePosition() {\r\n        return Math.floor(Math.random() * 100)\r\n    }\r\n\r\n    setNextOutgoingAttack() {\r\n        this.tiles = this.shuffleArray(this.tiles)\r\n        this.nextOutgoingAttack = this.tiles.pop()\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        array.sort((a, b) => 0.5 - Math.random())\r\n        return array\r\n    }\r\n\r\n    makeArrayOfTiles() {\r\n        let array = []\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(i)\r\n        }\r\n        return array\r\n    }\r\n}\r\n\r\nmodule.exports = Computer\r\n","function createBoard(DOMboardId) {\r\n    const boardContainer = document.getElementById(DOMboardId);\r\n    for (let i = 0; i < 100; i++) {\r\n        let tile = document.createElement('div')\r\n        tile.setAttribute('id', `${DOMboardId}-${i}`)\r\n        tile.classList.add('tile')\r\n        boardContainer.appendChild(tile)\r\n    }\r\n}\r\n\r\nfunction renderPlayerBoard(playerGameboard, DOMBoardId) {\r\n    showShips(playerGameboard, DOMBoardId)\r\n    showShotedWaterTiles(playerGameboard, DOMBoardId)\r\n    showShotedHitTiles(playerGameboard, DOMBoardId)\r\n}\r\n\r\nfunction renderEnemyBoard(enemyGameboard, DOMBoardId) {\r\n    showShotedWaterTiles(enemyGameboard, DOMBoardId)\r\n    showShotedHitTiles(enemyGameboard, DOMBoardId)\r\n}\r\n\r\nfunction showShips(playerGameboard, DOMBoardId) {\r\n    for (tileId of Object.keys(playerGameboard.tilesWithShips)) {\r\n        let tileWithShip = document.getElementById(`${DOMBoardId}-${tileId}`)\r\n        tileWithShip.classList.add('tile-ship')\r\n    }\r\n}\r\n\r\nfunction showShotedWaterTiles(playerGameboard, DOMBoardId) {\r\n    for (tileId of playerGameboard.tilesShoted.water) {\r\n        let tileWithShip = document.getElementById(`${DOMBoardId}-${tileId}`)\r\n        tileWithShip.classList.add('tile-water')\r\n    }\r\n}\r\n\r\nfunction showShotedHitTiles(playerGameboard, DOMBoardId) {\r\n    for (tileId of playerGameboard.tilesShoted.hit) {\r\n        let tileWithShip = document.getElementById(`${DOMBoardId}-${tileId}`)\r\n        tileWithShip.classList.add('tile-hit')\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = { createBoard, renderPlayerBoard, renderEnemyBoard }","const Human = require('./humanPlayer')\r\nconst Computer = require('./computerPlayer')\r\n\r\nclass Game {\r\n    constructor(_player1Type, _p1name, _player2Type, _p2name) {\r\n        this.player1 = this.createPlayer(_player1Type, _p1name)\r\n        this.player2 = this.createPlayer(_player2Type, _p2name)\r\n        this.relatePlayers()\r\n    }\r\n\r\n    createPlayer(_playerType, _playerName) {\r\n        if (_playerType === 'human') {\r\n            return new Human(_playerName)\r\n        } else if (_playerType === 'computer') {\r\n            return new Computer(_playerName)\r\n        } else {\r\n            throw new Error('type of player not valid. Must be \"human\" or \"computer\"')\r\n        }\r\n    }\r\n\r\n    relatePlayers() {\r\n        this.player1.setEnemy(this.player2)\r\n        this.player2.setEnemy(this.player1)\r\n    }\r\n}\r\n\r\nmodule.exports = Game\r\n","const Ship = require('./ship');\r\n\r\nclass Gameboard {\r\n\r\n    constructor() {\r\n        this.ships = {}\r\n        this.tilesWithShips = {}\r\n        this.tilesShoted = {'water': [], 'hit': []}\r\n    }\r\n\r\n    addShip(shipLenght) {\r\n        let ship = new Ship(shipLenght)\r\n        this.ships[ship.getId()] = ship\r\n        return this.ships[ship.getId()]\r\n    }\r\n\r\n    placeShip(shipId, position) {\r\n        let tiles = this.ships[shipId].setPosition(position)\r\n        let possibleTiles = {}\r\n        for (const tile of tiles) {\r\n            if (!(tile in this.tilesWithShips)) {\r\n                possibleTiles[tile] = shipId\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n        this.tilesWithShips = { ...this.tilesWithShips, ...possibleTiles }\r\n        return true\r\n    }\r\n\r\n    receiveAttack(coordinate) {\r\n        if (this.tilesShoted.water.includes(coordinate) || this.tilesShoted.hit.includes(coordinate)) {\r\n            return false\r\n        }\r\n        if (coordinate in this.tilesWithShips) {\r\n            const shipId = this.tilesWithShips[coordinate]\r\n            this.ships[shipId].hit()\r\n            this.tilesShoted.hit.push(coordinate)\r\n            return true\r\n        }\r\n        this.tilesShoted.water.push(coordinate)\r\n        return true\r\n    }\r\n\r\n    allShipsSank() {\r\n        for (const ship of Object.values(this.ships)) {\r\n            if (!ship.isSunk()) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Gameboard\r\n","const Player = require('./player')\r\n\r\nclass Human extends Player {\r\n    constructor(_name) {\r\n        super(_name)\r\n    }\r\n\r\n    placeShips() {\r\n        return null\r\n    }\r\n\r\n    setNextOutgoingAttack(coordinate) {\r\n        this.nextOutgoingAttack = coordinate\r\n    }\r\n}\r\n\r\nmodule.exports = Human\r\n","const Gameboard = require('./gameboard')\r\n\r\nclass Player {\r\n    constructor(_name) {\r\n        this.name = _name\r\n        this.gameboard = new Gameboard()\r\n        this.nextOutgoingAttack = null\r\n        this.enemy = null\r\n    }\r\n\r\n    createShips() {\r\n        for (let i = 2; i < 6; i++) {\r\n            for (let j = 1; j < 7 - i; j++) {\r\n                this.gameboard.addShip(i)\r\n            }\r\n        }\r\n    }\r\n\r\n    placeShips() {\r\n        return null\r\n    }\r\n\r\n    setNextOutgoingAttack() {\r\n        // setea el proximo ataque, este va a variar en humanos y computadora\r\n        return null\r\n    }\r\n\r\n    getNextOutgoingAttack() {\r\n        return this.nextOutgoingAttack\r\n    }\r\n\r\n    setEnemy(_enemy) {\r\n        this.enemy = _enemy\r\n    }\r\n\r\n    getEnemy() {\r\n        return this.enemy\r\n    }\r\n\r\n    deleteEnemy() {\r\n        this.enemy = null\r\n    }\r\n\r\n    play() {\r\n        let coordinate = this.getNextOutgoingAttack()\r\n        this.enemy.gameboard.receiveAttack(coordinate)\r\n        this.nextOutgoingAttack = null\r\n    }\r\n}\r\n\r\nmodule.exports = Player\r\n","\r\nclass Ship {\r\n\r\n    static currentId = -1\r\n\r\n    constructor(_length) {\r\n        if (_length <= 0 || 6 <= _length) {\r\n            throw new Error('Ship length must be between 1 and 5')\r\n        }\r\n        this.id = this.setId()\r\n        this.length = _length\r\n        this.hits = 0\r\n        this.sunk = false\r\n        this.horizontal = true\r\n        this.position = -1\r\n    }\r\n\r\n    setId() {\r\n        Ship.currentId++\r\n        return Ship.currentId\r\n    }\r\n\r\n    getId() {\r\n        return this.id\r\n    }\r\n\r\n    hit() {\r\n        this.hits += 1\r\n        return this\r\n    }\r\n\r\n    isSunk() {\r\n        if (this.hits === this.length) {\r\n            this.sunk = true\r\n            return this.sunk\r\n        }\r\n        return this.sunk\r\n    }\r\n\r\n    setPosition(_position) {\r\n        if (_position < 0 || _position > 99) { throw new Error('position not valid') }\r\n        this.position = _position\r\n        let tiles = this.setTiles()\r\n        return tiles\r\n    }\r\n\r\n    setTiles() {\r\n        let tiles = []\r\n        if (this.horizontal) {\r\n            const row = Math.floor(this.position / 10)\r\n            let i = 0\r\n            let j = 1\r\n            while (i < this.length) {\r\n                if (Math.floor((this.position + i) / 10) === row) {\r\n                    tiles.push(this.position + i)\r\n                } else {\r\n                    tiles.push(this.position - j)\r\n                    j++\r\n                }\r\n                i++\r\n            }\r\n        } else {\r\n            let i = 0\r\n            let j = 1\r\n            while (i < this.length) {\r\n                if (this.position + (i * 10) < 100) {\r\n                    tiles.push(this.position + (i * 10))\r\n                } else {\r\n                    tiles.push(this.position - (j * 10))\r\n                    j++\r\n                }\r\n                i++\r\n            }\r\n        }\r\n        return tiles\r\n    }\r\n\r\n    rotate() {\r\n        this.horizontal = !this.horizontal\r\n        this.setTiles()\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Ship\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require('./game')\r\nconst dom = require('./domManipulation')\r\n\r\ndom.createBoard('P1Board')\r\ndom.createBoard('P1enemyBoard')\r\n\r\nconst P1enemyBoard = document.getElementById('P1enemyBoard').childNodes\r\n\r\nP1enemyBoard.forEach(tile => {\r\n    tile.addEventListener('click', attackTile)\r\n})\r\n\r\nfunction attackTile(e) {\r\n    let tileId = e.path[0].id.split('-')[1]\r\n    game.player1.setNextOutgoingAttack(tileId)\r\n    gameLoop()\r\n    this.removeEventListener('click', attackTile)\r\n}\r\n\r\nconst game = new Game('human', 'human1', 'computer', 'cpu2')\r\n\r\ngame.player1.createShips()\r\ngame.player1.placeShips()\r\ngame.player2.createShips()\r\ngame.player2.placeShips()\r\n\r\nfunction gameLoop() {\r\n    game.player1.play()\r\n    game.player2.setNextOutgoingAttack()\r\n    game.player2.play()\r\n    dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\r\n    dom.renderEnemyBoard(game.player1.enemy.gameboard, 'P1enemyBoard')\r\n    if (game.player1.gameboard.allShipsSank() && game.player2.gameboard.allShipsSank()) {\r\n        console.log('tie')\r\n    } else if (game.player2.gameboard.allShipsSank()) {\r\n        console.log('player1 win')\r\n    } else if (game.player1.gameboard.allShipsSank()) {\r\n        console.log('player2 win')\r\n    }\r\n}\r\n\r\n// Game Loop for 2 computers\r\n// while (true) {\r\n//     game.player1.setNextOutgoingAttack()\r\n//     game.player1.play()\r\n//     game.player2.setNextOutgoingAttack()\r\n//     game.player2.play()\r\n//     dom.renderPlayerBoard(game.player1.gameboard, 'P1Board')\r\n//     dom.renderPlayerBoard(game.player1.enemy.gameboard, 'P1enemyBoard')\r\n//     if (game.player1.gameboard.allShipsSank() && game.player2.gameboard.allShipsSank()) {\r\n//         console.log('tie')\r\n//         break\r\n//     } else if (game.player2.gameboard.allShipsSank()) {\r\n//         console.log('player1 win')\r\n//         break\r\n//     } else if (game.player1.gameboard.allShipsSank()) {\r\n//         console.log('player2 win')\r\n//         break\r\n//     }\r\n// }\r\n\r\n\r\n"],"sourceRoot":""}